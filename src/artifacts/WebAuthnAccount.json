{
  "name": "WebAuthnAccount",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signing_pub_key_x",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        },
        {
          "name": "signing_pub_key_y",
          "type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "deserialize_and_validate_webauthn_witness",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "challenge",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "public_key_x_f",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        },
        {
          "name": "public_key_y",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/23IyQkAAAgDQa/037L7EPThwhCIbNOsI5Co8381XIqpA0AAAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "authwit::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJzdWNFu2zAM/Bc9B4FIkZSYXxn2EGwdUKBIhyVvgf+9ThvJRsPZCIcWU5/iAEf6dD7paJ/D0/OP/enx+XAMu3NIYfftHI6/94fLv+Np/+cUdnETHg4/x99hE349Pj2EHQybGxSkxHpFjtcFGjqxBSeMVOGEsgZPgg0daQLr8H0TqE/a3Cdt6ZN27pN26ZO29kkbYqe8oVPe2CnvTpMSOo1K6DQrodOwhE7TEjqNS/jMvBwxjUnS8i+80cxLEJFak7Ess6eYW/8yrZTia38z10BjW7CWvNxfufLHCFP/bIFLE1JFJqhDFzPX7uGNUauGiETLvHOBK7bg1JYs3qPGVyjH1KCMFgWSahTkONlK4/16mHn5P+jB0PSQuKKHVKemmZGo3K+GmcIfpoZiPae00FyNCxUzWD+Fir6nYmblh1EBwPrkAViXXYKl1GePCrKyFbI2ygV5GUwtRIinvvzmEzOFv7oi3DavJJ4rYh3ulTDmiW+S+3ekOTd8daWFKmXJ/N575kTSoyIlcRsAZg/eBI/t6hF/M4ukrb0dI7cxMOrNp0lPEXuKxFOUPUXFU6SeIoiuKnBVoavK5Qpw2QJcvgCXMcDlDHBZA1zewLg1D21tpw7E2RA/Xr6+T7hu5bIGuqyBZC+L2msMw3Q8Cr1NTltzdsJSpUjpZrb4iy1WakxuKzVmkizWuMyHurU/33LLrPlAcTHEMLwA4x7T5g==",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "",
      "",
      "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DeyvGthfNbC/amB/1cD+qoH9VQP7qwb2Vw3srxrYXzWwv2pgf9XA/qqB/VUD+6sG9lcN7K8a2F81sL9qYH/VwP6qgf1VA/urBvZXDeyvGthfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfOdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfBdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhfJdhf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cy62z7nYPudi+5yL7XMuts+52D7nYvuci+1zLrbPudg+52L7nIvtcy62z7nYPudi+5yL7XMuts+52D7nYvuci+1zLrbPudg+52L7nIvtcy62z7nYvuBi+4KL7Qsuti+42L54UU3l4GL7govtCy62L7jYvuBi+4KL7Qsuti+42L7gYvuCi+0LLrYvuNi+4GL7govtCy62L7jYvuBi+4KL7Qsuti+42L7gYvuCi+0LLrYvuNi+4GL7govtCy62L7jYvuBi+4KL7Qsuti+42L7gYvuCi+0LLrYvuNi+4GL7govtCy62L7jYvuBi+4KL7Qsuti+42L7gYvuCi+0LLrYvuNi+4GL7govtCy62L7jYvuBi+4KL7Qsuti+42L7gYvuCi+0LLrYvuNi+4GL7govtCy62L7jYvuBi+4KL7Qsuti+42L7gYvuCi+0LLrYvuNi+4GL7govtCy62L7jYvuBi+4KL7Qsuti+42L7gYvuCi+0LLrYvuNi+4GL7govtCy62L7jYvuBi+4KL7Qsuti+42L7gYvuCi+0LLrYvudi+5GL7kovtSy62L19UUzm52L7kYvuSi+1LLrYvudi+5GL7kovtSy62L7nYvuRi+5KL7Usuti+52L7kYvuSi+1LLrYvudi+5GL7kovtSy62L7nYvuRi+5KL7Usuti+52L7kYvuSi+1LLrYvudi+5GL7kovtSy62L7nYvuRi+5KL7Usuti+52L7kYvuSi+1LLrYvudi+5GL7kovtSy62L7nYvuRi+5KL7Usuti+52L7kYvuSi+1LLrYvudi+5GL7kovtSy62L7nYvuRi+5KL7Usuti+52L7kYvuSi+1LLrYvudi+5GL7kovtSy62L7nYvuRi+5KL7Usuti+52L7kYvuSi+1LLrYvudi+5GL7kovtSy62L7nYvuRi+5KL7Usuti+52L7kYvuSi+1LLrYvudi+5GL7kovtSy62L7nYvuRi+5KL7etcbF/nYvs6F9vXudi+/qKayp2L7etcbF/nYvs6F9vXudi+zsX2dS62r3OxfZ2L7etcbF/nYvs6F9vXudi+zsX2dS62r3OxfZ2L7etcbF/nYvs6F9vXudi+zsX2dS62r3OxfZ2L7etcbF/nYvs6F9vXudi+zsX2dS62r3OxfZ2L7etcbF/nYvs6F9vXudi+zsX2dS62r3OxfZ2L7etcbF/nYvs6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"
    ],
    "fileMap": {
      "1": {
        "source": "mod public_key_note;\n\n// Account contract that uses Schnorr signatures for authentication.\n// The signing key is stored in an immutable private note and should be different from the encryption/nullifying key.\ncontract WebAuthnAccount {\n    use dep::std;\n    use dep::std::option::Option;\n\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        note::{ note_header::NoteHeader, utils as note_utils },\n        oracle::get_public_key::get_public_key,\n        state_vars::immutable_singleton::ImmutableSingleton,\n    };\n    use dep::authwit:: {\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        account::AccountActions,\n        auth_witness::get_auth_witness,\n    };\n    use dep::aztec::log::{\n        emit_unencrypted_log_from_private,\n        emit_unencrypted_log,\n    };\n\n    use crate::public_key_note::{PublicKeyNote, PublicKeyNoteMethods, PUBLIC_KEY_NOTE_LEN};\n\n    struct Storage {\n        // docs:start:storage\n        signing_public_key: ImmutableSingleton<PublicKeyNote, PUBLIC_KEY_NOTE_LEN>,\n        // docs:end:storage\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                // docs:start:storage_init\n                signing_public_key: ImmutableSingleton::new(context, 1, PublicKeyNoteMethods),\n                // docs:end:storage_init\n            }\n        }\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n    global WEBAUTHN_WITNESS_MAX_LEN = 1; // TODO change to proper value\n\n    // Constructs the contract\n    #[aztec(private)]\n    fn constructor(\n        signing_pub_key_x: pub [Field; 2],\n        signing_pub_key_y: pub Field,\n    ) {\n        emit_unencrypted_log_from_private(&mut context, \"constructor\");\n        let this = context.this_address();\n        // docs:start:initialize\n        let mut pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.signing_public_key.initialize(&mut pub_key_note, Option::none(), true);\n        // docs:end:initialize\n    }\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        emit_unencrypted_log_from_private(&mut context, \"entrypoint\");\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        emit_unencrypted_log_from_private(&mut context, \"is_valid\");\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        emit_unencrypted_log(&mut context, \"is_valid_public\");\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        emit_unencrypted_log(&mut context, \"set_is_valid_storage\");\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        emit_unencrypted_log_from_private(context, \"is_valid_impl\");\n\n        // Load public key from storage\n        let storage = Storage::init(Context::private(context));\n\n        let public_key = storage.signing_public_key.get_note();\n\n        // Load auth witness\n        let witness: [Field; WEBAUTHN_WITNESS_MAX_LEN] = get_auth_witness(message_hash);\n        deserialize_and_validate_webauthn_witness(witness, message_hash, public_key.x, public_key.y);\n\n        true\n    }\n\n    fn deserialize_and_validate_webauthn_witness(witness: [Field; WEBAUTHN_WITNESS_MAX_LEN], challenge: Field, public_key_x_f: [Field; 2], public_key_y: Field) {\n        // TODO implement\n        // let mut public_key_x: [u8; 1] = [0; 1];\n        // for i in 0..1 {\n        //     public_key_x[i] = public_key_x_f[i] as u8;\n        // }\n        assert(true);\n    }\n\n    // Computes notes hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> [Field; 4] {\n        assert(storage_slot == 1);\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(PublicKeyNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/Users/akonior/projects/zk/Quetzal/src/contracts/webauthn_account_contract/src/main.nr"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "36": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/address.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\n#[oracle(pedersenHash)]\nfn pedersen_hash_oracle<N>(_inputs: [Field; N], _hash_index: u32) -> Field {}\n\nunconstrained fn pedersen_hash_internal<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_oracle(inputs, hash_index)\n}\n\n// TODO(Kev): We can move this into the noir std-lib \n// as an acir opcode, once we have the pedersen PR merged.\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  // Temporary hack. This is not right. Kev forced me to do this. Blame him.\n  pedersen_hash_internal(inputs, hash_index)\n  // let input_size = inputs.len();\n  // let mut modified_inputs = [];\n  // modified_inputs = modified_inputs.push_back(input_size as Field);\n  // for i in 0..N {\n  //   modified_inputs = modified_inputs.push_back(inputs[i]);\n  // }\n  // pedersen_with_separator(modified_inputs, hash_index)[0]\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/log.nr"
      },
      "45": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"
      },
      "48": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/note/note_hash.nr"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/note/utils.nr"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key.nr"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"
      },
      "67": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/private_call_stack_item.nr"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
      },
      "71": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/state_vars/immutable_singleton.nr"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    } else {\n        pedersen_hash(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/state_vars/singleton.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "81": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/types/type_serialization/bool_serialization.nr"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/utils.nr"
      },
      "86": {
        "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::selector::compute_selector;\nuse dep::aztec::state_vars::{map::Map, public_state::PublicState};\nuse dep::aztec::types::type_serialization::bool_serialization::{BoolSerializationMethods,BOOL_SERIALIZED_LEN};\n\nuse crate::entrypoint::EntrypointPayload;\nuse crate::auth::IS_VALID_SELECTOR;\n\nstruct AccountActions {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<PublicState<bool, BOOL_SERIALIZED_LEN>>,\n}\n\nimpl AccountActions {\n  pub fn init(context: Context, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions {\n      context: context,\n      is_valid_impl: is_valid_impl,\n      approved_action: Map::new(\n        context,\n        approved_action_storage_slot,\n        |context, slot| {\n          PublicState::new(context, slot, BoolSerializationMethods)\n        },\n      ),\n    }\n  }\n\n  pub fn private(context: &mut PrivateContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::private(context), approved_action_storage_slot, is_valid_impl)\n  }\n\n  pub fn public(context: &mut PublicContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::public(context), approved_action_storage_slot, is_valid_impl)\n  }\n  \n  // docs:start:entrypoint\n  pub fn entrypoint(self, payload: EntrypointPayload) {\n    let message_hash = payload.hash();\n    let valid_fn = self.is_valid_impl;\n    let private_context = self.context.private.unwrap();\n    assert(valid_fn(private_context, message_hash));\n    payload.execute_calls(private_context);\n  }\n  // docs:end:entrypoint\n\n  pub fn is_valid(self, message_hash: Field) -> Field {\n    let valid_fn = self.is_valid_impl;\n    if (valid_fn(self.context.private.unwrap(), message_hash)) {\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn is_valid_public(self, message_hash: Field) -> Field {\n    let value = self.approved_action.at(message_hash).read();\n    if (value){\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn internal_set_is_valid_storage(self, message_hash: Field, value: bool) {\n    self.approved_action.at(message_hash).write(value);\n  }\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/authwit/src/account.nr"
      },
      "87": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/authwit/src/auth_witness.nr"
      },
      "89": {
        "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::hash::pedersen_hash;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;    \nuse dep::aztec::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/authwit/src/entrypoint.nr"
      },
      "90": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_unique_siloed_note_hash,\n    },\n    hash::pedersen_hash,\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    context::PrivateContext,\n};\n\nglobal PUBLIC_KEY_NOTE_LEN: Field = 4;\n\n// Stores a public key composed of two fields\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\nstruct PublicKeyNote {\n    x: [Field; 2],\n    y: Field,\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier and to broadcast\n    header: NoteHeader,\n}\n\nimpl PublicKeyNote {\n    pub fn new(x: [Field; 2], y: Field, owner: Field) -> Self {\n        PublicKeyNote {\n            x,\n            y,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // serialize the note as 3 fields\n    pub fn serialize(self) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n        let x = self.x;\n        [\n            x[0], x[1],\n            self.y, self.owner\n        ]\n\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let unique_siloed_note_hash = compute_unique_siloed_note_hash(PublicKeyNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> PublicKeyNote {\n    let x = [preimage[0], preimage[1]];\n    PublicKeyNote {\n        x: x,\n        y: preimage[2],\n        owner: preimage[3],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialize(note: PublicKeyNote) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: PublicKeyNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    pedersen_hash(note.serialize(),0)\n}\n\nfn compute_nullifier(note: PublicKeyNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: PublicKeyNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut PublicKeyNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: PublicKeyNote) {\n    note.broadcast(context, slot);\n}\n\nglobal PublicKeyNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/Users/akonior/projects/zk/Quetzal/src/contracts/webauthn_account_contract/src/public_key_note.nr"
      }
    }
  }
}
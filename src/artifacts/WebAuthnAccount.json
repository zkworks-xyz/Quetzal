{
  "name": "WebAuthnAccount",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signing_pub_key_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        },
        {
          "name": "signing_pub_key_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "deserialize_and_validate_webauthn_witness",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "challenge",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "public_key_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "public_key_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/23U1Y5CQRQF0R5n3N0Y98Hd+f+P4lY4JFDhJh2yXrtrM04pDdP0W8nOanbWspOb87q8IW/KW3JO3pZ35F15T96XD+RD+Ug+lk/kU/lMPpcv5Ev5Sr6Wb+Rb+U6+lx/kRzkvP8nP8ov8Kr/J7/KH/Cl/yd/yj/wr/8n/ckEuyiW5LFfkqlyT63JDbsotuS135K7ck/vyQB7KI3kc5jelxf8Bts/e2fhs1+yXzbJTtske2SC7Y2vsi02xI7bDXtgIu2AL9E/zdE7b9EzDdJtP0z5pkg5pj95ojK5oiX5ohk5ogx5ooBBvXYo3rcTb1eKNGvEWrbjzTtxtL+5wEHc1mruLZd8ET/SgZzQFAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "entrypoint",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "payload",
          "type": {
            "kind": "struct",
            "path": "authwit::entrypoint::EntrypointPayload",
            "fields": [
              {
                "name": "function_calls",
                "type": {
                  "kind": "array",
                  "length": 4,
                  "type": {
                    "kind": "struct",
                    "path": "authwit::entrypoint::FunctionCall",
                    "fields": [
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "target_address",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "is_public",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "name": "nonce",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "public"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_valid_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "set_is_valid_storage",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "message_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "value",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJzdWNFuIjEM/Jc8I5TEdmzzK6c+oLueVKmi1cEb2n/vwpHsqvgW4VOrpk8s0thMhknG2WN4fvm5PTy97PZhcwyFw+bHMexft7vT1/1h++cQNnEVHne/xs9hFX4/PT+GTRpWV6gEQHpBjs+SGhrIgmOOWOGYyy04lNzQESewDg+rUKRT3tonb46d8k6d8s6d8oZOeWOnvKlT3qVT3p3mJXeal9xpXkqneSmd5qV0mpfymXk5YhoTUPkv3mZeJgaqNay8zB4jt/4yrRTjub+Za0m5riBHKsv9lXLDpqk/W2BpQmqZ2rJDFzPX7uGdo5aKzYjLvFnSBSt5khst3qPGFyhFaFDKBhQgVgoA47oqWOP9eph5+RX0oNT0KHFZj1yqU2FmJJT71TBT+MPU0FzPKRWcq3GiYgbrp1DRd1TUzMoPo5JSrv98SqTLLgHO9UQDJlzeChmods7AZRmMLURwtjo6+0TNFP7uilDbvOWUSJMi1uHe2vLEF8rdO1LNueG7K12wUi5M771nTiRdKiKNBhHdAGv1HlzNIoXXdopFanNg1Os3lK4q9VRxdFUlV1V2VYGrCl1V5KoqriqXN9jlDXZ5Q1zeEJc3xOUNcXlDcG1OU9oOnxRns/z4eL5WuH7KZQ1xWUPEXha22wyl6ZQs+HeAWpvXjizTGH81YvzDFjdqTG43asxJc7HGZT6FdTInSYr1cjefK06GGIY3G1nXWA==",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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",
      "",
      "",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod public_key_note;\nmod webauthn;\n\n// Account contract that uses Schnorr signatures for authentication.\n// The signing key is stored in an immutable private note and should be different from the encryption/nullifying key.\ncontract WebAuthnAccount {\n    use dep::std;\n    use dep::std::option::Option;\n\n    use dep::aztec::{\n        context::{PrivateContext, Context},\n        note::{ note_header::NoteHeader, utils as note_utils },\n        oracle::get_public_key::get_public_key,\n        state_vars::immutable_singleton::ImmutableSingleton,\n    };\n    use dep::authwit:: {\n        entrypoint::{ EntrypointPayload, ENTRYPOINT_PAYLOAD_SIZE },\n        account::AccountActions,\n        auth_witness::get_auth_witness,\n    };\n    use dep::aztec::log::{\n        emit_unencrypted_log_from_private,\n        emit_unencrypted_log,\n    };\n\n    use crate::public_key_note::{PublicKeyNote, PublicKeyNoteMethods, PUBLIC_KEY_NOTE_LEN};\n    use crate::webauthn::validate_webauthn_signature;\n\n    struct Storage {\n        // docs:start:storage\n        signing_public_key: ImmutableSingleton<PublicKeyNote, PUBLIC_KEY_NOTE_LEN>,\n        // docs:end:storage\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                // docs:start:storage_init\n                signing_public_key: ImmutableSingleton::new(context, 1, PublicKeyNoteMethods),\n                // docs:end:storage_init\n            }\n        }\n    }\n\n    global ACCOUNT_ACTIONS_STORAGE_SLOT = 2;\n    global WEBAUTHN_WITNESS_MAX_LEN = 1; // TODO change to proper value\n\n    // Constructs the contract\n    #[aztec(private)]\n    fn constructor(\n        signing_pub_key_x: pub [u8; 32],\n        signing_pub_key_y: pub [u8; 32],\n    ) {\n        emit_unencrypted_log_from_private(&mut context, \"constructor\");\n        let this = context.this_address();\n        // docs:start:initialize\n        let mut pub_key_note = PublicKeyNote::new(signing_pub_key_x, signing_pub_key_y, this);\n        storage.signing_public_key.initialize(&mut pub_key_note, Option::none(), true);\n        // docs:end:initialize\n    }\n\n    #[aztec(private)]\n    fn entrypoint(payload: pub EntrypointPayload) {\n        emit_unencrypted_log_from_private(&mut context, \"entrypoint\");\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.entrypoint(payload);\n    }\n\n    #[aztec(private)]\n    fn is_valid(message_hash: Field) -> Field {\n        emit_unencrypted_log_from_private(&mut context, \"is_valid\");\n        let actions = AccountActions::private(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid(message_hash)\n    }\n\n    #[aztec(public)]\n    fn is_valid_public(message_hash: Field) -> Field {\n        emit_unencrypted_log(&mut context, \"is_valid_public\");\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.is_valid_public(message_hash)\n    }\n\n    #[aztec(public)]\n    internal fn set_is_valid_storage(message_hash: Field, value: bool) {\n        emit_unencrypted_log(&mut context, \"set_is_valid_storage\");\n        let actions = AccountActions::public(&mut context, ACCOUNT_ACTIONS_STORAGE_SLOT, is_valid_impl);\n        actions.internal_set_is_valid_storage(message_hash, value)\n    }\n\n    #[contract_library_method]\n    fn is_valid_impl(context: &mut PrivateContext, message_hash: Field) -> pub bool {\n        emit_unencrypted_log_from_private(context, \"is_valid_impl\");\n\n        // Load public key from storage\n        let storage = Storage::init(Context::private(context));\n\n        let public_key = storage.signing_public_key.get_note();\n\n        // Load auth witness\n        let witness: [Field; WEBAUTHN_WITNESS_MAX_LEN] = get_auth_witness(message_hash);\n        deserialize_and_validate_webauthn_witness(witness, message_hash, public_key.x, public_key.y);\n\n        true\n    }\n\n    fn deserialize_and_validate_webauthn_witness(witness: [Field; WEBAUTHN_WITNESS_MAX_LEN], challenge: Field, public_key_x: [u8; 32], public_key_y: [u8; 32]) {\n        // TODO validate_webauthn_signature\n        assert(true);\n    }\n\n    // Computes notes hash and nullifier.\n    // Note 1: Needs to be defined by every contract producing logs.\n    // Note 2: Having it in all the contracts gives us the ability to compute the note hash and nullifier differently for different kind of notes.\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> [Field; 4] {\n        assert(storage_slot == 1);\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(PublicKeyNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/Users/akonior/projects/zk/Quetzal/src/contracts/webauthn_account_contract/src/main.nr"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field.nr"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "36": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/address.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\n#[oracle(pedersenHash)]\nfn pedersen_hash_oracle<N>(_inputs: [Field; N], _hash_index: u32) -> Field {}\n\nunconstrained fn pedersen_hash_internal<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_oracle(inputs, hash_index)\n}\n\n// TODO(Kev): We can move this into the noir std-lib \n// as an acir opcode, once we have the pedersen PR merged.\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  // Temporary hack. This is not right. Kev forced me to do this. Blame him.\n  pedersen_hash_internal(inputs, hash_index)\n  // let input_size = inputs.len();\n  // let mut modified_inputs = [];\n  // modified_inputs = modified_inputs.push_back(input_size as Field);\n  // for i in 0..N {\n  //   modified_inputs = modified_inputs.push_back(inputs[i]);\n  // }\n  // pedersen_with_separator(modified_inputs, hash_index)[0]\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/log.nr"
      },
      "45": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"
      },
      "48": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/note/note_hash.nr"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/note/utils.nr"
      },
      "55": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: Field,\n    _function_selector: Field,\n    _args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: Field,\n    function_selector: Field,\n    args_hash: Field\n) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n    )\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/call_private_function.nr"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key.nr"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"
      },
      "67": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/private_call_stack_item.nr"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
      },
      "71": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note,\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::singleton::compute_singleton_initialization_nullifier;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> ImmutableSingleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        ImmutableSingleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note, \n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(\n            context,\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note(self) -> Note {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot, self.note_interface)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/state_vars/immutable_singleton.nr"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "75": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{EMPTY_NULLIFIED_COMMITMENT, GENERATOR_INDEX__INITIALIZATION_NULLIFIER};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note},\n    note_getter::{get_note, view_notes},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n};\nuse crate::oracle::{\n    get_secret_key::get_secret_key,\n    notes::check_nullifier_exists,\n};\nuse crate::hash::pedersen_hash;\n\npub fn compute_singleton_initialization_nullifier(storage_slot: Field, owner: Option<Field>) -> Field {\n    if owner.is_some() {\n        let secret = get_secret_key(owner.unwrap_unchecked());\n        pedersen_hash(\n            [storage_slot, secret.low, secret.high],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    } else {\n        pedersen_hash(\n            [storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\n// docs:start:struct\nstruct Singleton<Note, N> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    compute_initialization_nullifier: fn (Field, Option<Field>) -> Field,\n}\n// docs:end:struct\n\nimpl<Note, N> Singleton<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Singleton {\n            context: context.private,\n            storage_slot,\n            note_interface,\n            compute_initialization_nullifier: compute_singleton_initialization_nullifier,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self, owner: Option<Field>) -> bool {\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize(\n        self,\n        note: &mut Note,\n        owner: Option<Field>,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let compute_initialization_nullifier = self.compute_initialization_nullifier;\n        let nullifier = compute_initialization_nullifier(self.storage_slot, owner);\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n\n        create_note(context, self.storage_slot, note, self.note_interface, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace(\n        self,\n        new_note: &mut Note,\n        broadcast: bool,\n    ) {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note, self.note_interface);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, self.note_interface, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note(self, broadcast: bool) -> Note {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot, self.note_interface);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note, self.note_interface);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, self.note_interface, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note(self) -> Note {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, self.note_interface, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/state_vars/singleton.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "81": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\n\nfn deserializeBool(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n    fields[0] as bool\n}\n\nfn serializeBool(value: bool) -> [Field; BOOL_SERIALIZED_LEN] {\n    [value as Field]\n}\n\nglobal BoolSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeBool,\n    serialize: serializeBool,\n};",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/types/type_serialization/bool_serialization.nr"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/aztec/src/utils.nr"
      },
      "86": {
        "source": "use dep::aztec::context::{PrivateContext, PublicContext, Context};\nuse dep::aztec::selector::compute_selector;\nuse dep::aztec::state_vars::{map::Map, public_state::PublicState};\nuse dep::aztec::types::type_serialization::bool_serialization::{BoolSerializationMethods,BOOL_SERIALIZED_LEN};\n\nuse crate::entrypoint::EntrypointPayload;\nuse crate::auth::IS_VALID_SELECTOR;\n\nstruct AccountActions {\n  context: Context,\n  is_valid_impl: fn(&mut PrivateContext, Field) -> bool,\n  approved_action: Map<PublicState<bool, BOOL_SERIALIZED_LEN>>,\n}\n\nimpl AccountActions {\n  pub fn init(context: Context, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions {\n      context: context,\n      is_valid_impl: is_valid_impl,\n      approved_action: Map::new(\n        context,\n        approved_action_storage_slot,\n        |context, slot| {\n          PublicState::new(context, slot, BoolSerializationMethods)\n        },\n      ),\n    }\n  }\n\n  pub fn private(context: &mut PrivateContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::private(context), approved_action_storage_slot, is_valid_impl)\n  }\n\n  pub fn public(context: &mut PublicContext, approved_action_storage_slot: Field, is_valid_impl: fn(&mut PrivateContext, Field) -> bool) -> Self {\n    AccountActions::init(Context::public(context), approved_action_storage_slot, is_valid_impl)\n  }\n  \n  // docs:start:entrypoint\n  pub fn entrypoint(self, payload: EntrypointPayload) {\n    let message_hash = payload.hash();\n    let valid_fn = self.is_valid_impl;\n    let private_context = self.context.private.unwrap();\n    assert(valid_fn(private_context, message_hash));\n    payload.execute_calls(private_context);\n  }\n  // docs:end:entrypoint\n\n  pub fn is_valid(self, message_hash: Field) -> Field {\n    let valid_fn = self.is_valid_impl;\n    if (valid_fn(self.context.private.unwrap(), message_hash)) {\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn is_valid_public(self, message_hash: Field) -> Field {\n    let value = self.approved_action.at(message_hash).read();\n    if (value){\n        IS_VALID_SELECTOR\n    } else {\n        0\n    }\n  }\n\n  pub fn internal_set_is_valid_storage(self, message_hash: Field, value: bool) {\n    self.approved_action.at(message_hash).write(value);\n  }\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/authwit/src/account.nr"
      },
      "87": {
        "source": "#[oracle(getAuthWitness)]\nfn get_auth_witness_oracle<N>(_message_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn get_auth_witness<N>(message_hash: Field) -> [Field; N] {\n    get_auth_witness_oracle(message_hash)\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/authwit/src/auth_witness.nr"
      },
      "89": {
        "source": "use dep::aztec::abi;\nuse dep::aztec::types::vec::BoundedVec;\nuse dep::aztec::hash::pedersen_hash;\nuse dep::aztec::context::PrivateContext;\nuse dep::aztec::private_call_stack_item::PrivateCallStackItem;\nuse dep::aztec::public_call_stack_item::PublicCallStackItem;    \nuse dep::aztec::constants_gen::GENERATOR_INDEX__SIGNATURE_PAYLOAD;\n\nglobal ACCOUNT_MAX_CALLS: Field = 4;\n// 1 (ARGS_HASH) + 1 (FUNCTION_SELECTOR) + 1 (TARGET_ADDRESS) + 1 (IS_PUBLIC)\nglobal FUNCTION_CALL_SIZE: Field = 4;\n// 3 * 32 + 1\nglobal FUNCTION_CALL_SIZE_IN_BYTES: Field = 97;\n\nstruct FunctionCall {\n  args_hash: Field,\n  function_selector: Field,\n  target_address: Field,\n  is_public: bool,\n}\n\nimpl FunctionCall {\n  fn serialize(self) -> [Field; FUNCTION_CALL_SIZE] {\n    [self.args_hash, self.function_selector, self.target_address, self.is_public as Field]\n  }\n\n  fn to_be_bytes(self) -> [u8; FUNCTION_CALL_SIZE_IN_BYTES] {\n    let mut bytes: [u8; FUNCTION_CALL_SIZE_IN_BYTES] = [0; FUNCTION_CALL_SIZE_IN_BYTES];\n    let args_hash_bytes = self.args_hash.to_be_bytes(32);\n    for i in 0..32 { bytes[i] = args_hash_bytes[i]; }\n    let function_selector_bytes = self.function_selector.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 32] = function_selector_bytes[i]; }\n    let target_address_bytes = self.target_address.to_be_bytes(32);\n    for i in 0..32 { bytes[i + 64] = target_address_bytes[i]; }\n    bytes[96] = self.is_public as u8;\n    bytes\n  }\n}\n\n// FUNCTION_CALL_SIZE * ACCOUNT_MAX_CALLS + 1\nglobal ENTRYPOINT_PAYLOAD_SIZE: Field = 17;\n// FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS + 32\nglobal ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES: Field = 420;\n\n// docs:start:entrypoint-struct\nstruct EntrypointPayload {\n  function_calls: [FunctionCall; ACCOUNT_MAX_CALLS],\n  nonce: Field,\n}\n// docs:end:entrypoint-struct\n\nimpl EntrypointPayload {\n  fn hash(self) -> Field {\n    pedersen_hash(\n      self.serialize(), \n      GENERATOR_INDEX__SIGNATURE_PAYLOAD\n    )\n  }\n\n  // Serializes the entrypoint struct\n  fn serialize(self) -> [Field; ENTRYPOINT_PAYLOAD_SIZE] {\n    let mut fields: BoundedVec<Field, ENTRYPOINT_PAYLOAD_SIZE> = BoundedVec::new(0); \n    for call in self.function_calls {\n      fields.push_array(call.serialize());\n    }\n    fields.push(self.nonce);\n    fields.storage\n  }\n\n  // Serializes the payload as an array of bytes. Useful for hashing with sha256.\n  fn to_be_bytes(self) -> [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] {\n    let mut bytes: [u8; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES] = [0; ENTRYPOINT_PAYLOAD_SIZE_IN_BYTES];\n\n    for i in 0..ACCOUNT_MAX_CALLS {\n      let item_bytes = self.function_calls[i].to_be_bytes();\n      for j in 0..FUNCTION_CALL_SIZE_IN_BYTES { \n        bytes[i * FUNCTION_CALL_SIZE_IN_BYTES + j] = item_bytes[j];\n      }\n    }\n\n    let nonce_bytes = self.nonce.to_be_bytes(32);\n    let nonce_offset = FUNCTION_CALL_SIZE_IN_BYTES * ACCOUNT_MAX_CALLS;\n    for j in 0..32 {\n      bytes[nonce_offset + j] = nonce_bytes[j];\n    }\n    \n    bytes\n  }\n\n  // Executes all private and public calls \n  // docs:start:entrypoint-execute-calls\n  fn execute_calls(self, context: &mut PrivateContext) {\n    for call in self.function_calls {\n      if call.target_address != 0 {\n        if call.is_public {\n          context.call_public_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        } else {\n          let _result = context.call_private_function_with_packed_args(\n            call.target_address, call.function_selector, call.args_hash\n          );\n        }\n      }\n    }\n  }\n  // docs:end:entrypoint-execute-calls\n}",
        "path": "/Users/akonior/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.1/yarn-project/aztec-nr/authwit/src/entrypoint.nr"
      },
      "90": {
        "source": "use dep::aztec::{\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_unique_siloed_note_hash,\n    },\n    hash::pedersen_hash,\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    },\n    log::emit_encrypted_log,\n    context::PrivateContext,\n};\n\nglobal PUBLIC_KEY_NOTE_LEN: Field = 5;\n\n// Stores a public key composed of two fields\n// TODO: Do we need to include a nonce, in case we want to read/nullify/recreate with the same pubkey value?\nstruct PublicKeyNote {\n    x: [u8; 32],\n    y: [u8; 32],\n    owner: Field, // We store the owner address only to get the secret key to compute the nullifier and to broadcast\n    header: NoteHeader,\n}\n\nimpl PublicKeyNote {\n    pub fn new(x: [u8; 32], y: [u8; 32], owner: Field) -> Self {\n        PublicKeyNote {\n            x,\n            y,\n            owner,\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // serialize the note as 5 fields where:\n    // [0] = x[0..31] (upper bound excluded)\n    // [1] = x[31]\n    // [2] = y[0..31]\n    // [3] = y[31]\n    // [4] = owner\n    pub fn serialize(self) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n        let mut x: Field = 0;\n        let mut y: Field = 0;\n        let mut mul: Field = 1;\n\n        for i in 1..32 {\n          let byte_x: Field = self.x[31 - i] as Field;\n          x = x + (byte_x * mul);\n          let byte_y: Field = self.y[31 - i] as Field;\n          y = y + (byte_y * mul);\n          mul *= 256;\n        }\n\n        let last_x = self.x[31] as Field;\n        let last_y = self.y[31] as Field;\n        \n        let res: [Field; PUBLIC_KEY_NOTE_LEN] = [x, last_x, y, last_y, self.owner];\n        res\n    }\n\n    pub fn compute_nullifier(self) -> Field {\n        let unique_siloed_note_hash = compute_unique_siloed_note_hash(PublicKeyNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            unique_siloed_note_hash,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    pub fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; PUBLIC_KEY_NOTE_LEN]) -> PublicKeyNote {\n    let mut x: [u8; 32] = [0;32];\n    let mut y: [u8; 32] = [0;32];\n\n    let part_x = preimage[0].to_be_bytes(32);\n    for i in 0..31 { x[i] = part_x[i + 1]; }\n    x[31] = preimage[1].to_be_bytes(32)[31];\n\n    let part_y = preimage[2].to_be_bytes(32);\n    for i in 0..31 { y[i] = part_y[i + 1]; }\n    y[31] = preimage[3].to_be_bytes(32)[31];\n\n    PublicKeyNote {\n        x,\n        y,\n        owner: preimage[4],\n        header: NoteHeader::empty(),\n    }\n}\n\nfn serialize(note: PublicKeyNote) -> [Field; PUBLIC_KEY_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: PublicKeyNote) -> Field {\n    // TODO(#1205) Should use a non-zero generator index.\n    pedersen_hash(note.serialize(),0)\n}\n\nfn compute_nullifier(note: PublicKeyNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: PublicKeyNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut PublicKeyNote, header: NoteHeader) {\n    note.set_header(header);\n}\n\n// Broadcasts the note as an encrypted log on L1.\nfn broadcast(context: &mut PrivateContext, slot: Field, note: PublicKeyNote) {\n    note.broadcast(context, slot);\n}\n\nglobal PublicKeyNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast,\n};\n",
        "path": "/Users/akonior/projects/zk/Quetzal/src/contracts/webauthn_account_contract/src/public_key_note.nr"
      }
    }
  }
}
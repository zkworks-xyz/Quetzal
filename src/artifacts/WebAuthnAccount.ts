
/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractMethod,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  FieldLike,
  Fr,
  Point,
  PublicKey,
  Wallet,
} from '@aztec/aztec.js';
import WebAuthnAccountContractArtifactJson from './WebAuthnAccount.json' assert { type: 'json' };
export const WebAuthnAccountContractArtifact = WebAuthnAccountContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract WebAuthnAccount;
 */
export class WebAuthnAccountContract extends ContractBase {
  
  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, WebAuthnAccountContractArtifact, wallet, portalContract);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, WebAuthnAccountContract.artifact, wallet) as Promise<WebAuthnAccountContract>;
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, signing_pub_key_x: (bigint | number)[], signing_pub_key_y: (bigint | number)[]) {
    return new DeployMethod<WebAuthnAccountContract>(Point.ZERO, wallet, WebAuthnAccountContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(publicKey: PublicKey, wallet: Wallet, signing_pub_key_x: (bigint | number)[], signing_pub_key_y: (bigint | number)[]) {
    return new DeployMethod<WebAuthnAccountContract>(publicKey, wallet, WebAuthnAccountContractArtifact, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return WebAuthnAccountContractArtifact;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** compute_note_hash_and_nullifier(contract_address: field, nonce: field, storage_slot: field, preimage: array) */
    compute_note_hash_and_nullifier: ((contract_address: FieldLike, nonce: FieldLike, storage_slot: FieldLike, preimage: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** deserialize_and_validate_webauthn_witness(challenge: field, public_key_x_f: array, public_key_y: array) */
    deserialize_and_validate_webauthn_witness: ((challenge: FieldLike, public_key_x_f: (bigint | number)[], public_key_y: (bigint | number)[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** entrypoint(payload: struct) */
    entrypoint: ((payload: { function_calls: { args_hash: FieldLike, function_selector: FieldLike, target_address: FieldLike, is_public: boolean }[], nonce: FieldLike }) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** is_valid(message_hash: field) */
    is_valid: ((message_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** is_valid_public(message_hash: field) */
    is_valid_public: ((message_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** set_is_valid_storage(message_hash: field, value: boolean) */
    set_is_valid_storage: ((message_hash: FieldLike, value: boolean) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}

{
  "name": "Test",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdVXNbVxSGYduJ7TLXYWZqJUuypGKaMqeYchM1crlNMeWmaRtmZmZOfmHWO5FnPLnNvtnznplvbN149FjS0YG117rS1tZ2sO3a1h7piHS2fh943HXd4+7W74O3gcdzWz9Lhb5yuVntbRZLxUWF3nqjVimUK42+WrFWrNQqi3trpVKzVq5V6416tVAvlkvNYn+lXuovXNuGDfpbhRvcBj/PjuueZ+HGtmJ7QvPwTMwdCc0jMjEPSWgemYl5aELzqEzMnQnNozMxdyU0j8nE3J3QPDYT87CE5nFC83iheYLQPFFoniQ0TxaapwjNU4XmaULzdKF5htA8U2ieJTTPFprnCM0PCM0PCs0FobkoNPcKzSWhuSw0V4TmPqG5KjTXhOa60PyQ0Pyw0PyI0Pyo0PyY0Py40DxXaH5CaJ4nND8pND8lND8tND8jND8rND8nND8vNL8gNL8oNL8kNL8sNL8iNL8qNM8Xml8Tml8Xmt8Qmt8Umt8Smt8WmhcIze8Ize8Kze8Jze8LzR8IzR8KzR8JzR8LzQuF5kVCc0No/kRoXiw0N4XmfqH5U6H5M6H5c6H5C6H5S6H5K6H5a6H5G6H5W6F5idD8ndD8vdD8g9D8o9D8k9D8s9C8VGj+RWj+VWj+TWj+XWj+Q2j+U2j+S2j+W2heJjT/IzQvF5r/FZr/E5r/F5pXCM0rheZVQvNqoXmN0LxWaF4nNK8XmjcIzRuF5k1C82aheYvQvFVo3iY0bxeadwjNO4XmXULzbqF5j9C8V2jeJzTvF5oPCM0HheZDQvNhofmI0Hw0E/NNCc3HMjHfnNB8PBPzLQnNJzIx35rQfDIT820JzacyMd+e0Hw6E/MdCc1nMjHfmdB8NhPzXQnN5zIx353QfD4T8z0JzRcyMd+b0HwxE/N9Cc2XMjHfn9B8ORNzT0LzlYTmntbfaW+Zh0SGRjojXZHuCOeEnCNxzsAxNMeUHGNxzMF3MN9J7KPZZ/EZ5j3Na9wz6P+5t/VzeGREZGRkVGR0ZExkbGRcZHxkQmRiZFJkcmRKZGpkWmR6ZEZkZmRWZHZkToQZ98x850VkJjgzspkZzQxlZgozY7caYQYrM0mZ0cnMSmY4MtOQGX8DM++YiTYvwswsZkgxU4kZQ8zcYQYNM1mYUcLMDmZYMNOBGQf0/J8foSc8PdLpGU4PbXpK02N5QYQevPSkpUcrPUvp4UlPS3o80vNwYYSeeI0IPdPoIUZPLXpM0XOJHkT05KFHDT1b6GFCTw96XNDzYUmEngCskWfNOGuoWVPMGtulEdZgsiaRNXqsWWMNF2uaWOPDmpdlEdZELI9QM08NOTXV1BhTc0sNKjWZ1ChSs0cNGzVd1DhR80MNDDUh1EhQM8A9dO4pc4+Ve47cg+OeFPdoeE9wDZ9r2lzj5ZrnoQjXxLhGxDUTriFwTs05JudcnINwTM4xKsdsHMPwnc53HPt89oHsE/iMDGxXAR3DARWElwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "consume_mint_private_message",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "secret_hash_for_redeeming_minted_notes",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_for_L1_to_L2_message_consumption",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "consume_mint_public_message",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "to",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "create_l2_to_l1_message_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secretHash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "create_nullifier_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secretHash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "emit_nullifier",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "nullifier",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+3dd3MTRxjH8ZOLDIEQUk3H9A53KrZEmkMa6aQnpGFhOaQRB6eSRkjvpBdSiNM7/fXxfIfTzFn/8jB453c384wk21rfR3X3bvd5jkdRNB6d3AoWHRbd6fXW7WLb7Z70emd6u3XfvmjiVkgvB9PL+NS2pNevrbhtV/N283bzdvN283bzdvN283bzdvN2J2W7fm2Xthcybc6ymJZenxqd7NuzFTI/62jbj6L/PsXFyH3cEDOe6ck4WlvLM8NiisX09PZoc7i5a6y5c/PQ2I7sY9TVdr9C5npf5u86M/+ru+2+2cex9bvWeGrCNuiDT9oHaTPb/o/3IG1WlL9Z83bzdvN283bPVLt+bU/sJMyOJkMnIQm2k5D97p1UnYRsm+0PbDnur1SaA6VmUk6G4lK9UavGlWqjv5bUkmqtOlyqlcvNWqU2UG/UB+J6Uik3k5FqvTySNj4nOj0vdO/9nOuznyOVUmXCfnY4P1cFR/O80/TceJs7HM3zAzF3OpoXBGLucjQvDMTc7WjuC8RcdDQvCsTc42heHIh5tqN5SSDmOY7mpYLmZYLm5YLmFYLmlYLmVYLm1YLmNYLmtYLmdYLm9YLmDYLmWNCcCJpLguayoLkiaK4KmvsFzQOC5pqguS5o3ihovljQfImg+VJB82WC5ssFzYOC5isEzZsEzVcKmq8SNF8taL5G0HytoHmzoPk6QfP1guYbBM03CppvEjTfLGi+RdC8RdB8q6D5NkHz7YLmOwTNdwqa7xI03y1ovkfQfK+geaug+T5B8/2C5gcEzQ8Kmh8SNG8TNA8JmhuC5u2C5mFBc1PQPCJofljQvEPQ/Iig+VFB82OC5scFzU8ImncKmp8UNI8Kmp8SNO8SNI8Jmp8WND8jaH5W0PxcIOZeR/Pzgs/zC4Lm3YLmFwXNLwmaXxY0vyJoflXQvEfQ/Jqgea+g+XVB8xuC5jcFzW8Jmt8OxDzX0fyO4PP8rqD5PUHz+4LmDwTNHwqaPxI0fyxo3ido/kTQ/Kmg+TNB8+eC5i8EzV8Kmr8SNH8taP5G0PytoHm/oPk7QfP3guYfBM0/CpoPCJp/EjSPC5p/FjT/Imj+VdD8m6D590DMUxzNfwRinupo/jMQ81mO5r8CMU9zNP8diHm6o/mfQMxnO5r/DcQ8w9H8XyDmcxzN/wdinuloPhiI+VxH86FAzOc5mg8HYj7f0XwkEPMFjuajgZgvdDQfC8R8kaP5uKO5N22nkJo7Lbosui2KFj0WjAkZIzFmoA9Nn5I+Fn0OvoP5TuIzms8s3sO8pnmOMfdmHtP96eU8i/kWCywWWvRZLLJYbLHEYqnFMovlFissVlqsslhtscZircU6i/UWG3gMLBIL6txT95066NQFp042daOpo0xd4Y0W1J2lDit1SanT2apbSV3DTRbUvaMOHHXRqBNG3SzqSFFXiTpD1N2hDg11WahTQt2OLRbUdaDOAXn/yYNPXnjypJM3nDza5JXeakHeYfLwkpeWPK3kLd1mQV7LhgV5D8kDSF488sSRN408YuTVIs8UeZfIQ0ReHvLUkLdl1IK8HuS5IO8DeRDIC8A6edaNs46adcW7LVh3yjpM1iWyTo91a3ssWNe014J1L6wDYV0E6wSYN888cuZVM8+YebfMQ2VeJvMUmbe3z4J5XcxzYt4P82CYF8I8CeYNcB6d88qcZ+U1wHk4zktxnobzFgcsOK49bsFxT44DclyM40QcN+E4AuNqxpmMuxiH0C+nn0q/jX4M3+t8z/G5z+cgnwu8T1rbCUNs7QL6rQAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "emit_unencrypted",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "value",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_portal_contract_address",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "aztec_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+3d93MTRxQH8JOLTAsh1SY00zvcqdhSQhIDKaQ7vZEEyTpDEmI7ktJJQkjv9N577+Xf432Hu5n1wW88Bu9892beWAL7WZ/zSdo77b53zfO8Q96NLSXRINEc3Y7vpxP3W6LbjdH9+GfbvcFbKvraFX31b28LWvVy+YmH6vK6vC6vy+vyurwur8vr8rq8QzKvXu5MT8rI2SYxMro93LsxtseWMv6tIfE40vqPyU976ucNPs5nWgxHvMWe0RLDJEZF9wfCSlithX3LSrVV5j5qSvxcyrjdbnxfo/G7mhM/a+7H+P/i86lBW5cOPkiepI1J/B7tk7Q2zz1ZXV6X1+V1ee9WXr3cgwcJY72hMEgIrB0kmO+9Q26QcFNyb2hfwTUf7yMSI26x8+JN/yD079hBmDYc8ZY8CNui+yvDend/tV5avbS/r14t9dQXVyrVsFYz903ySWrmw+9oSnyfuf/i/3MHX2IzH+84zx181h58Zs7kDs36Hblc2JkJg2xQ8jPFciHv5/LljkJQCPKFfCVTyGbDQq7QWSwXO/1ikMuGQW++mO2Nko/37sxbfIPyPkgpmidYYm5QNE+0xNyoaJ5kiblJ0dxuiblZ0TzZEnNa0TzFEnOLonmqJeaxiuZplpjHKZqnW2Ier2ieQWieSWieRWieTWieQ2ieS2ieR2ieT2heQGheSGj2Cc0BoTlDaM4SmnOE5jyhuYPQ3EloLhCai4TmRwnNjxGaFxGaHyc0P0FofpLQ3EVoXkxoXkJoXkpoforQ/DSh+RlC87OE5mWE5ucIzc8Tml8gNL9IaH6J0PwyofkVQnM3oflVQvNrhObXCc1vEJrfJDS/RWh+m9D8DqH5XULze4Tm9wnNywnNHxCaPyQ0f0RoXkFoLhGay4TmHkJzhdAcEpp7Cc0rCc2rCM0fE5o/ITR/SmheTWj+jNDcR2juJzQPEJo/JzRXCc01QnOd0PwFoflLQvNXhOavCc3fEJq/JTR/R2heQ2j+ntD8A6H5R0LzWkLzT4TmdYTmnwnNvxCafyU0/0Zo/p3Q/Aeh+U9C81+E5r8Jzf8Qmv8lNP9HaP6f0Lye0LyB0LyR0LyJ0LyZ0LyF0LyV0LyN0Lyd0LyD0LyT0LyL0Lyb0LyH0LyX0LyP0Lyf0HyA0HyQ0HyI0HyY0HyE0HyU0HyM0HzcEvMwRfMJS8zDFc0nLTGPUDSfssQ8UtF82hLzKEXzGUvM9yiaz1piHq1oPmeJ+V5F83lLzGMUzRcsMd+naL5oifl+RfMlS8wPKJovW2J+UNF8xRLzQ4rmq5aYH1Y0X1M0t0Z5UpG5UaJJolkiLdEigXNCnCPhnAFjaIwpMcbCmAPvwXhPwms0XrPwHMYxjb8xzK3GPt0VfZ0gMVFikkS7xGSJKRJTJaZJTJeYITFTYpbEbIk5EnMl5knMl1ggsRB+iUAig/0qgb7v6IOOvuDok42+0eijjL7C6LO7SAJ9WNGXNO7TiT6OSyTQ5w9979AHDn3R0CcMfbPQRwp9ldBnCH130IcGfVnQp6RbAn0s0NcBfQ5Q9x918FEXHnXSUTccdbRRVxp1lpdLoA4v6tKiTusKCdTxLEugziPqHqIOIOrioU4c6qahjhjqaqHOFOouoQ4R6vKgTs2ABOqYoK4H6lyg7gPqIKAuANbJY9041lFjXTHW2a6RwDpMrEvEOr21EljHtU4C63yw7gXrQLAuAusEMG8e88gxrxrzjDHvFvNQMS8T8xTXS2AeG+Z1YZ4T5v1gHgzmhWCeBOYN4HN0fK6Mvz8+d8TncPhcCp/T7JfAdfyDErjOi+ueuA6I62K4ToTrJriOgPNqnGfivAvnIRiXY5yKcRvGMXhfx/scXvfxOojXBTxP4u06UPtMw0yyAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_public_key",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_random",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "kindaSeed",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/82UTQ7CIBCFB9qiaOIFXHgFvAErD+ANTNoYE3823j+2KZhPyq4YfQlhYGjfmx/QIqJkRAWbiHs+zG4e9qrcvxz16n7sgm3DmjCwfSF+Uz4/roFWm8Q3YNOPdWbfhBqWrpVk8ibgohb1Yy1Wpj085HMLfy2febP4vs6cY0zNF2Iij8c6cq2gof4DLTrRQr+GnzUxyTnez+hb9GMpY38POHfP4+nePm6HS3dt05tOsII6w1CBYfLC+TC7eXi3JwlURvALSNn5j3MFAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_this_address",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdVXNbVxSGYduJ7TLXYWZqJUuypGKaMqeYchM1crlNMeWmaRtmZmZOfmHWO5FnPLnNvtnznplvbN14/FjWwbXXutLW1naw7drWHumIdLa+H3jddd3r7tb3g7eB13NbX0uFvnK5We1tFkvFRYXeeqNWKZQrjb5asVas1CqLe2ulUrNWrlXrjXq1UC+WS81if6Ve6i9c24YN+lmFG9wG/54d1/2ehRvbiu0JzcMzMXckNI/IxDwkoXlkJuahCc2jMjF3JjSPzsTcldA8JhNzd0Lz2EzMwxKax2ViTnmsGi98nycIzROF5klC82SheYrQPFVoniY0TxeaZwjNM4XmWULzbKF5jtD8gND8oNBcEJqLQnOv0FwSmstCc0Vo7hOaq0JzTWiuC80PCc0PC82PCM2PCs2PCc2PC81zheYnhOZ5QvOTQvNTQvPTQvMzQvOzQvNzQvPzQvMLQvOLQvNLQvPLQvMrQvOrQvN8ofk1ofl1ofkNoflNofktofltoXmB0PyO0Pyu0Pye0Py+0PyB0Pyh0PyR0Pyx0LxQaF4kNDeE5k+E5sVCc1No7heaPxWaPxOaPxeavxCavxSavxKavxaavxGavxWalwjN3wnN3wvNPwjNPwrNPwnNPwvNS4XmX4TmX4Xm34Tm34XmP4TmP4Xmv4Tmv4XmZULzP0LzcqH5X6H5P6H5f6F5hdC8UmheJTSvFprXCM1rheZ1QvN6oXmD0LxRaN4kNG8WmrcIzVuF5m1C83aheYfQvFNo3iU07xaa9wjNe4XmfULzfqH5gNB8UGg+JDQfFpqPCM1HMzHflNB8LBPzzQnNxzMx35LQfCIT860JzSczMd+W0HwqE/PtCc2nMzHfkdB8JhPznQnNZzMx35XQfC4T890JzeczMd+T0HwhE/O9Cc0XMzHfl9B8KRPz/QnNlzMx9yQ0X0lo7mn9nPaWeUhkaKQz0hXpjnBNyDUS1wycQ3NOyTkW5xwcgzkmsY9mn8VnmP9p3uOeQX/Pva2vwyMjIiMjoyKjI2MiYyPjIuMjEyITI5MikyNTIlMj0yLTIzMiMyOzIrMjcyLMuGfmO28iM8GZkc3MaGYoM1OYGbvVCDNYmUnKjE5mVjLDkZmGzPgbmHnHTLR5EWZmMUOKmUrMGGLmDjNomMnCjBJmdjDDgpkOzDig5//8CD3h6ZFOz3B6aNNTmh7LCyL04KUnLT1a6VlKD096WtLjkZ6HCyP0xGtE6JlGDzF6atFjip5L9CCiJw89aujZQg8TenrQ44KeD0si9ARgjTxrxllDzZpi1tgujbAGkzWJrNFjzRpruFjTxBof1rwsi7AmYnmEmnlqyKmppsaYmltqUKnJpEaRmj1q2KjposaJmh9qYKgJoUaCmgGeofNMmWesPHPkGRzPpHhGw/8E9/C5p809Xu55HopwT4x7RNwz4R4C19RcY3LNxTUI5+Sco3LOxjkMx3SOcezz2QeyT+AzMrBdBShUwQ6ElwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_this_portal_address",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdVXNbVxSGYduJ7TLXYWZqJUuypGKaMqeYchM1crlNMeWmaRtmZmZOfmHWO5FnPLnNvtnznplvbN149FjS0YG117rS1tZ2sO3a1h7piHS2fh943HXd4+7W74O3gcdzWz9Lhb5yuVntbRZLxUWF3nqjVimUK42+WrFWrNQqi3trpVKzVq5V6416tVAvlkvNYn+lXuovXNuGDfpbhRvcBj/PjuueZ+HGtmJ7QvPwTMwdCc0jMjEPSWgemYl5aELzqEzMnQnNozMxdyU0j8nE3J3QPDYT87CE5nGZmFPut8cLX+cJQvNEoXmS0DxZaJ4iNE8VmqcJzdOF5hlC80yheZbQPFtoniM0PyA0Pyg0F4TmotDcKzSXhOay0FwRmvuE5qrQXBOa60LzQ0Lzw0LzI0Lzo0LzY0Lz40LzXKH5CaF5ntD8pND8lND8tND8jND8rND8nND8vND8gtD8otD8ktD8stD8itD8qtA8X2h+TWh+XWh+Q2h+U2h+S2h+W2heIDS/IzS/KzS/JzS/LzR/IDR/KDR/JDR/LDQvFJoXCc0NofkToXmx0NwUmvuF5k+F5s+E5s+F5i+E5i+F5q+E5q+F5m+E5m+F5iVC83dC8/dC8w9C849C809C889C81Kh+Reh+Veh+Teh+Xeh+Q+h+U+h+S+h+W+heZnQ/I/QvFxo/ldo/k9o/l9oXiE0rxSaVwnNq4XmNULzWqF5ndC8XmjeIDRvFJo3Cc2bheYtQvNWoXmb0LxdaN4hNO8UmncJzbuF5j1C816heZ/QvF9oPiA0HxSaDwnNh4XmI0Lz0UzMNyU0H8vEfHNC8/FMzLckNJ/IxHxrQvPJTMy3JTSfysR8e0Lz6UzMdyQ0n8nEfGdC89lMzHclNJ/LxHx3QvP5TMz3JDRfyMR8b0LzxUzM9yU0X8rEfH9C8+VMzD0JzVcSmntaf6e9ZR4SGRrpjHRFuiOcE3KOxDkDx9AcU3KMxTEH38F8J7GPZp/FZ5j3NK9xz6D/597Wz+GREZGRkVGR0ZExkbGRcZHxkQmRiZFJkcmRKZGpkWmR6ZEZkZmRWZHZkTkRZtwz850XkZngzMhmZjQzlJkpzIzdaoQZrMwkZUYnMyuZ4chMQ2b8Dcy8YybavAgzs5ghxUwlZgwxc4cZNMxkYUYJMzuYYcFMB2Yc0PN/foSe8PRIp2c4PbTpKU2P5QURevDSk5YerfQspYcnPS3p8UjPw4UReuI1IvRMo4cYPbXoMUXPJXoQ0ZOHHjX0bKGHCT096HFBz4clEXoCsEaeNeOsoWZNMWtsl0ZYg8maRNbosWaNNVysaWKND2telkVYE7E8Qs08NeTUVFNjTM0tNajUZFKjSM0eNWzUdFHjRM0PNTDUhFAjQc0A99C5p8w9Vu45cg+Oe1Lco+E9wTV8rmlzjZdrnociXBPjGhHXTLiGwDk155icc3EOwjE5x6gcs3EMw3c633Hs89kHsk/gMzKwXQW1/1WwhJcAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "is_time_equal",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "time",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "test_code_gen",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "aField",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "aBool",
          "type": {
            "kind": "boolean"
          },
          "visibility": "private"
        },
        {
          "name": "aNumber",
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          "visibility": "private"
        },
        {
          "name": "anArray",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        },
        {
          "name": "aStruct",
          "type": {
            "kind": "struct",
            "path": "Test::DummyNote",
            "fields": [
              {
                "name": "amount",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "secretHash",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "aDeepStruct",
          "type": {
            "kind": "struct",
            "path": "Test::DeepStruct",
            "fields": [
              {
                "name": "aField",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "aBool",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "aNote",
                "type": {
                  "kind": "struct",
                  "path": "Test::DummyNote",
                  "fields": [
                    {
                      "name": "amount",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "secretHash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              },
              {
                "name": "manyNotes",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "struct",
                    "path": "Test::DummyNote",
                    "fields": [
                      {
                        "name": "amount",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "secretHash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ]
                  }
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+3dd3MTVxQF8JWLDIEQUrFpFtV0dlWsFdWQRkgjvSdYWA4hCXFweiWkk0Lvvffee/9e3DOsZtb7L9cDl7OaOWMJ7Of3k21p27v3huM4251bt4SkQlId3C8/TkYe10Qe10Ye10lSocf1wf3K4HH5e6WcjrdE8LEp+Oje3s3rpTeW21lzrDUwxzoDc+xtYI59DMyxr4E59jMwx/4G5lhvYI4pA3McYGCOAw3McZCBOQ42MMchBuY41MAcGzphjo7uHONx43HjceNx79lx9cZOz0qExhwm6Rbc7+rcOjaBWyL0bxWReST15+QmHfX3LRfHb2pCjvKt7Okh6SLpHjxuK7WU5rWX5k5rbp8dfo6qIl+XCN1PhT6vMvS9qiNfG34ey/9XPn7U4dakg/eiB5l6Rr6P9kbCMCf+Y43HjceNx43HvVPj6o3dcSNhuHM3bCR4ZjcSwu+9d9VGQnjM6BObcRuz2VI+XfIyXrObLhT9nJvNFRt9z/dyfq4l7WcyJT/r5wvFQt4teNlMyWvNFTKtweAjnM75Ra9Qfg4SiuaRRswViuZRRsyViubRRsxViuYxRszViuaxRsxJRbNrxFyjaPaMmIcrmtOE5owR8whFc5bQnCM0NxKa84Rmn9BcIDSPIzSPJzRPIDRPJDRPIjRPJjQ3EZqnEJqnEpofJzQ/QWh+ktD8FKH5aULzNELzM4Tm6YTmZwnNzxGanyc0v0BofpHQPIPQ/BKh+WVC8yuE5lcJza8Rml8nNL9BaH6T0PwWofltQvM7hOZ3Cc3vEZrfJzR/QGieSWhuJjQXCc2zCM0thOYSobmV0PwhoXk2ofkjQvMcQvPHhOZPCM2fEprnEpo/IzS3EZo/JzTPIzS3E5q/IDR/SWj+itD8NaH5G0Lzt4Tm7wjN3xOafyA0/0ho/onQ/DOheT6h+RdC8wJC86+E5t8Izb8Tmv8gNP9JaP6L0Pw3oXkhofkfQvO/hOb/CM3/E5oXEZoXE5qXEJqXEpqXEZqXE5pXEJpXEppXEZpXE5rXEJrXEprXEZrXE5o3EJo3Epo3EZo3E5q3EJq3Epq3EZq3E5p3EJp3Epp3EZp3E5r3EJr3Epr3EZr3E5oPEJoPEpoPEZoPE5qPEJqPEpqPEZqPE5pPEJpPGjF3UTSfMmLuqmg+bcR8n6L5jBFzN0XzWSPm7ormc0bM9yuazxsx91A0XzBifkDRfNGIuaei+ZIR84OK5stGzA8pmq8YMT+saL5qxPyIovmaEfOjiubrRsyPKZpvKJobgnESgblSUiWpliQlNRLsE2IfCfsM2IbGNiW2sbDNgfdgvCfhNRqvWfgbxu80fsYw95LUSuokvSV9JH0l/ST9JfWSlGSAZKBkkGSwZIhkqKQh9DNZF3wcKRklGS0ZIxmL50HiSdJ4fiVZSU7SKMlLfElBMk4yXjJBMlEySTI5eD6nSKZK0EcdfcXRZxt9p9GHGX2J0ad3ugR9XNHXFH0+0fcSfSBnSNAnEH3z0EcOfdXQZwx9t9CHCn2Z0KcIfXvQxwZ9XdDnBH0/0AdjpgR9EooS1NFHXXnUWUfdcdThRl1q1GmeI0EdX9S1RZ1X1D1FHdA2CepEom4i6giirh7qzKHuGuqQoS4X6lShbhPqGKGuD+rcoO4L6qDMl6BOxgIJ6iigrgDW2WPdOdZhY10y1ukulGAdJ9Y1Yp0f1r1hHdhiCdYJYd0M1pFgXQXWGeC6e1yHjuuycZ3y2uDniOs6cZ0jrvvDdXCbJbhOaqsE19HguhJcZ4HrDnAeHuelcZ4W5y1xHg/ntXCeB+c9cB4Ax8VxnBjHTXEcEcfVcJwJx11wHAL75dhPxX4b9mOwXY/tXGz3YTvosgTvk3jfwOsoXlfwd1a+3QTToB6wgrIAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [
    {
      "name": "ExampleEvent",
      "path": "Test::ExampleEvent",
      "fields": [
        {
          "name": "value",
          "type": {
            "kind": "field"
          }
        }
      ]
    }
  ],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "",
      "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88r3e76r6fW88v2e7995Pa98v+c7VV7PK9/v+Z6M1/PK93u+++D1vPL9nv87++t55fs9/xfl1/PK93v+b6ev55Xv9/xfCV/PK9/v+b+HvZ5Xvt/zf/l5Pa98v+f/xvF6Xvl+z6v5r+eV7/e8bv16Xvl+zyu0r+eV7/e8Fvl6Xvl+z6tur+eV7/c8a/v1vPL9KvWrrNSvslK/ykr9ipT6FSn1K1LqV6TUr0ipX5FSvyKlfkVK/YqU+hUp9StS6lek1K9IqV+RUr8ipX5FSv2KlPoVKfUrUupXpNSvSKlfkVK/IqV+RUr9ipT6FSn1K1LqV6TUr0ipX5FSvyKlfkVK/YqU+hUp9StS6lek1K9IqV+RUr8ipX5FSv2KlPoVKfUrUupXpNSvSKlfkVK/IqV+RUr9ipT6FSn1K1LqV6TUr0ipX5FSvyKlfkVK/YqU+hUp9StS6lek1K9IqV+RUr8ipX5FSv2KlPoVKfUrUupXpNSvSKlfkVK/IqV+RUr9ipT6FSn1K1LqV6TUr0ipX5FSvyKlfkVK/YqU+hUp9StS6lek1K9IqV+RUr8ipX5FSv2KlPoVKfUrUupXpNSvSKlfkVK/IqV+RUr9ipT6FSn1K1LqV6TUr1ipX7FSv2KlfsVK/YqV+hUr9StW6les1K9YqV+xUr9ipX7FSv2KlfoVK/UrVupXrNSvWKlfsVK/YqV+xUr9ipX6FSv1K1bqV6zUr1ipX7FSv2KlfsVK/YqV+hUr9StW6les1K9YqV+xUr9ipX7FSv2KlfoVK/UrVupXrNSvWKlfsVK/YqV+xUr9ipX6FSv1K1bqV6zUr1ipX7FSv2KlfsVK/YqV+hUr9StW6les1K9YqV+xUr9ipX7FSv2KlfoVK/UrVupXrNSvWKlfsVK/YqV+xUr9ipX6FSv1K1bqV6zUr1ipX7FSv2KlfsVK/YqV+hUr9StW6les1K9YqV+xUr9ipX7FSv2KlfoVK/UrVupXrNSvWKlfsVK/YqV+xUr9ipX6FSv1K1bqV6zUr1ipX7FSv2KlfsVK/UqU+pUo9StR6lei1K9EqV+JUr8SpX4lSv1KlPqVKPUrUepXotSvRKlfiVK/EqV+JUr9SpT6lSj1K1HqV6LUr0SpX4lSvxKlfiVK/UqU+pUo9StR6lei1K9EqV+JUr8SpX4lSv1KlPqVKPUrUepXotSvRKlfiVK/EqV+JUr9SpT6lSj1K1HqV6LUr0SpX4lSvxKlfiVK/UqU+pUo9StR6lei1K9EqV+JUr8SpX4lSv1KlPqVKPUrUepXotSvRKlfiVK/EqV+JUr9SpT6lSj1K1HqV6LUr0SpX4lSvxKlfiVK/UqU+pUo9StR6lei1K9EqV+JUr8SpX4lSv1KlPqVKPUrUepXotSvRKlfiVK/EqV+JUr9SpT6lSj1K1HqV6LUr0SpX4lSvxKlfiVK/UqU+pUo9StR6lei1K+KUr8qSv2qKPWrotSvilK/Kkr9qij1q6LUr4pSvypK/aoo9aui1K+KUr8qSv2qKPWrotSvilK/Kkr9qij1q6LUr4pSvypK/aoo9aui1K+KUr8qSv2qKPWrotSvilK/Kkr9qij1q6LUr4pSvypK/aoo9aui1K+KUr8qSv2qKPWrotSvilK/Kkr9qij1q6LUr4pSvypK/aoo9aui1K+KUr8qSv2qKPWrotSvilK/Kkr9qij1q6LUr4pSvypK/aoo9aui1K+KUr8qSv2qKPWrotSvilK/Kkr9qij1q6LUr4pSvypK/aoo9aui1K+KUr8qSv2qKPWrotSvilK/Kkr9qij1q6LUr4pSvypK/aoo9aui1K+KUr8qSv2qKPWrotSvilK/Kkr9qij1q6LUr4pSvypK/aoo9aui1K+KUr8qSv2qKPWrotSvqlK/qkr9qir1q6rUr6pSv6pK/aoq9auq1K+qUr+qSv2qKvWrqtSvqlK/qkr9qir1q6rUr6pSv6pK/aoq9auq1K+qUr+qSv2qKvWrqtSvqlK/qkr9qir1q6rUr6pSv6pK/aoq9auq1K+qUr+qSv2qKvWrqtSvqlK/qkr9qir1q6rUr6pSv6pK/aoq9auq1K+qUr+qSv2qKvWrqtSvqlK/qkr9qir1q6rUr6pSv6pK/aoq9auq1K+qUr+qSv2qKvWrqtSvqlK/qkr9qir1q6rUr6pSv6pK/aoq9auq1K+qUr+qSv2qKvWrqtSvqlK/qkr9qir1q6rUr6pSv6pK/aoq9auq1K+qUr+qSv2qKvWrqtSvqlK/qkr9qir1q6rUr6pSv6pK/aoq9auq1K+qUr+qSv2qKvWrqtSvqlK/qkr9qir1q6rUr8JDKWA9P6B7w88P6F7x8wO6d/z8gO4lPz+ge8vPD+he8/MDuvf8/IDuRT8/oH3TSinr+QHtm1aKWc8PaN+0Us56fkD7ppWC1vMD2jetlLSeH9C+aaWo9fyA9k0rZa3nB7RvWilsPT+gfdNKaev5Ae2bVopbzw9o37RS3np+QPumlQLX8wPaN62UuJ4f0L5ppcj1/ID2TStlrucHtG9aKXQ9P6B900qp6/kB7ZtWil3PD2jftFLuen5A+6aVgtfzA9o3rZS8nh/Qvmml6PX8gPZNK2Wv5we0b1opfD0/oH3TSunr+QHtm1aKX88PaN+0Uv56fkD7ppUC2PMD2jetlMCeH9C+aaUI9vyA9k0rZbDnB7RvWimEPT+gfdNKKez5Ae2bVophzw9o37RSDnt+QPumlYLY8wPaN62UxJ4f0L5ppSj2/ID2TStlsecHtG9aKYw9P6B900pp7PkB7ZtWimPPD2jftFIee35A+6aVAtnzA9o3rZTInh9Qvumg1ciCViMLWo0saDWyoNXIglYjC1qNLGg1sqDVyIJWIwtajSxoNbKg1ciCViMLWo0saDWyoNXIglYjC1qNLGg1sqDVyIJWIwtajSxoNbKg1ciCViMLWo0saDWyoNXIglYjC1qNLGg1sqDVyIJWIwtajSxoNbKg1ciCViMLWo0saDWyoNXIglYjC1qNLGg1sqDVyIJWIwtajSxoNbKg1ciCViMLWo0saDWyoNXIglYjC1qNLGg1sqDVyIJWIwtajSxoNbKg1ciCViMLWo0saDWyoNXIglYjC1qNLGg1sqDVyIJWIwtajSxoNbKg1ciCViMLWo0saDWyoNXIglYjC1qNLGg1sqDVyIJWIwtajSxoNbKg1ciCViMLWo0saDWyoNXIglYjC1qNLGg1sqDVyIJWIwtajSxoNbKg1ciCViMLWo0saDWyqNXIolYji1qNLGo1sqjVyKJWI4tajSxqNbKo1ciiViOLWo0sajWyqNXIolYji1qNLGo1sqjVyKJWI4tajSxqNbKo1ciiViOLWo0sajWyqNXIolYji1qNLGo1sqjVyKJWI4tajSxqNbKo1ciiViOLWo0sajWyqNXIolYji1qNLGo1sqjVyKJWI4tajSxqNbKo1ciiViOLWo0sajWyqNXIolYji1qNLGo1sqjVyKJWI4tajSxqNbKo1ciiViOLWo0sajWyqNXIolYji1qNLGo1sqjVyKJWI4tajSxqNbKo1ciiViOLWo0sajWyqNXIolYji1qNLGo1sqjVyKJWI4tajSxqNbKo1ciiViOLWo0sajWyqNXIolYji1qNLGo1sqjVyKJWI4tajSxqNbKo1ciiViOLWo0sajWyqNXIolYji1qNLGo1sqTVyJJWI0tajSxpNbKk1ciSViNLWo0saTWypNXIklYjS1qNLGk1sqTVyJJWI0tajSxpNbKk1ciSViNLWo0saTWypNXI0rFGlpnz6zNZAv362N//4dlE70dT4c+TVD4rHP5qmK5w+LtkusLhL5/pCoe/raYrHP56m65wuB9MVzjcQKYrHO44yxWOxU3TFbrv6WP51HSF7nv6WKA1XaH7nj6WgE1X6L6nj0Vm0xW67+ljGdt0he57+lgoN12h+54+luJNV+i+p4/FftMVuu/p4z8nmK7QfU8f/8HCdIXue/r4TyKmK3Tf08d/dDFdofuePv6zjukK3ff08R+OTFfovqeP/zRlukL3PX38xy/TFbrv6eM/r5mu0H1PH/8Bz3SF7nv6+E+Epit039PHf4Q0XaH7nj7+M6fpCt339PEfUk1X6L6nj/9Ua7pC9z19/Mdg0xW67+njPzebrtB9Tx//Qdt0he57+vhP5qYrdN/Tx3+UN12h+54+/rO/6Qrd9/RxY4HpCt339HHrgukK3ff0cXOE6Qrd9/Rx+4XpCt339HGDh+kKvfd0Pm4hMV2h957Ox00qpiv03tP50XtP5+O+GdMVeu/pfNyZY7pC7z2dj3t/LFc4bhYyXaH7nj5uRzJdofuePm54Ml2h+54+bqkyXaH7nj5u2jJdofuePm4LM12h+57u3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eR5e59ZLl7H1nu3keWu/eRUfc+MureR0bd+8ioex8ZPXrvaereR0bd+8ioex8Zde8jo+59ZNS9j4y695FR9z4y6t5HRt37yKh7Hxl17yOj7n1k1L2PjLr3kVH3PjLq3kdG3fvIqHsfGXXvI6PufWTUvY+MuveRUfc+MureR0bd+8ioex8Zde8jo+59ZNS9j4y695FR9z4y6t5HRt37yKh7Hxl17yOj7n1k1L2PjLr3kVH3PjLq3kdG3fvIqHsfGXXvI6PufWTUvY+MuveRUfc+MureR0bd+8ioex8Zde8jo+59ZNS9j4y695FR9z4y6t5HRt37yKh7Hxl17yOj7n1k1L2PjLr3kVH3PjLq3kdG3fvIqHsfGXXvI6PufWTUvY+MuveRUfc+MureR0bd+8ioex8Zde8jo+59ZNS9j4y695FR9z4y6t5HRt37yKh7Hxl17yOj7n1k1L2PjLr3kVH3PjLq3kdG3fvIqHsfGXXvI6PufWTUvY+MuveRcfc+Mu7eR8bd+8i4ex8ZP3rvae7eR8bd+8i4ex8Zd+8j4+59ZNy9j4y795Fx9z4y7t5Hxt37yLh7Hxl37yPj7n1k3L2PjLv3kXH3PjLu3kfG3fvIuHsfGXfvI+PufWTcvY+Mu/eRcfc+Mu7eR8bd+8i4ex8Zd+8j4+59ZNy9j4y795Fx9z4y7t5Hxt37yLh7Hxl37yPj7n1k3L2PjLv3kXH3PjLu3kfG3fvIuHsfGXfvI+PufWTcvY+Mu/eRcfc+Mu7eR8bd+8i4ex8Zd+8j4+59ZNy9j4y795Fx9z4y7t5Hxt37yLh7Hxl37yPj7n1k3L2PjLv3kXH3PjLu3kfG3fvIuHsfGXfvI+PufWTcvY+Mu/eRcfc+Mu7eR8bd+8i4ex8Zd+8j4+59ZNy9j4y795Fx9z4y7t5Hxt37yLh7Hxl37yPj7n1k3L2PjLv3kXH3PjLu3kfG3fvIuHsfGXfvI+PufWTcvY+Mu/eRSfc+MuneRybd+8ikex+ZPHrvaeneRybd+8ikex+ZdO8jk+59ZNK9j0y695FJ9z4y6d5HJt37yKR7H5l07yOT7n1k0r2PTLr3kUn3PjLp3kcm3fvIpHsfmXTvI5PufWTSvY9MuveRSfc+MuneRybd+8ikex+ZdO8jk+59ZNK9j0wM+sjk8V6h1s+T6eDJnx/6vGR/noxHPzQ8yvunhhDk98Nvw6+nikmGX89Akwy/ntgmGX49X84x3KD1b5Lh17P7JMOvHxqTDL9+Fk0y/PoRN8nwVU9OgybQSYavenIatKxOMnzVk9OgwXaS4auenAbtwJMMX/XkNGhenmT4qienQav1JMNXPTkNGsMnGb7qyWnQxj7J8FVPToOm+0mGr3pyGowITDJ81ZPTYKBhkuGrnpwG4xeTDF/15DQYFplk+Konp8FoyyTDVz05DQZxJhm+6slpMDY0yfBVT87rQ045fh7NPNDwyyfnJMOvj2TNMvzyyTnL8Msn5yzDL5+cswy/fHLOMvzyyTnL8Msn5yzDL5+cswxf9eS8PqE4yfDrg4+zDF/15Lw+pjnL8FVPzutDpbMMX/XkvD4CO8vwVU/O6wO7swxf9OQs18eLZxm+6MlZrg9DzzJ80ZOzPBY9Ocv1ifBZhi96cpbr8+uzDF/05CzXp+0nGX59iH+W4auenNeRA7MMX/XkvA5ImGX4qifndZzDLMNXPTmvwydmGX795JTPowP/slyuozJmGX795Jxk+PWTc5Lh10/OSYZfPzknGX795Jxk+PWTc5Lh10/OSYZfPzknGb7qyXkdSDPL8FVPzuv4nFmGr3pyXof9zDJ81ZPzOkNoluGrnpzXGUKzDF/15LzOEJpl+Kon53WG0CzDVz05rzOEZhm+6sl5nSE0y/BVT87rDKFZhq96cl5nCM0yfNWT8zpDaJbhq56c1xlCswxf9eS8zhCaZfiqJ+d1htAsw1c9Oa+DYSiU16MUH78Mfy9wOW21Frj8y86J3wHN8WCBy7+UIvR6VIQPFrj8y9NY4DruorXA5TKmtcDlcqO1wOV90Frg8j5oLXD5mG0tcPk4bC1weSe3Fui9k6+P9TcWuD5+31qg906+Ps7eWqD3Tr4+Ht5aoPdOvj5u3Vrg8k4uj/B6tDwOzuTr48utBS7v5MYC18eBWwtc3smtBS7v5NYCl3dya4HLO7m1wOWd3Frg8k5uLdB7J18fp2wt0Hkn1+vjia0FOu/ken3cr7VA551cH513cr0+5tZa4PpOjvJeIJaDBa7v5MYC13dyY4HrO/nPC1wfl2otcH0nNxa4vpMbC1zfyY0Fru/kxgLXd3Jjgd47+foYS2uB3jv5+lhIY4Hr4xutBXrv5OvjEK0Feu/k6+MFrQWu72RK7wUoHyxwfSc3Fri+kxsLXN/JjQWu7+Q/L3C9nby1wPWd3Fjg+k5uLHB9JzcWuL6TGwv03snX24dbC/TeydfbcVsL9N7J19tbWwv03snX20VbC/TeydfbL1sL9N7J19sZWwv03snX2wNbC/Teydfb7Up5/02//nryqNshUnw9GSX9PFk/tlzf9Ha2XM8PdrZcTyV2tlzPOna2XE9QdrZcz2V2tlxPe3a2XM+QdrZcT6Zmtlz/wjdDWxzl3etfy2Zoi6O8e7337rwtKb87AhLRkS0D827TloF5t2nLwLzbtGVg3m3aMjDvtmy53j9paMvAvNu0ZWDebdoyMO8meV+PUjnKu9d7PQ1tGZl3W7aMzLstW0bm3ZYtI/Nuy5aRebdhy/VuV0NbRubdli0D93R+vCdI8u+2lR9bBu7ppi0Df3cpvX8o5XBgi0F/p50tA393m7YMrBk41deTnOXIloE1A6f0Z1uOawaRd9dYLin/0Zb33nj8eur9w48ThuKHxxg+U1LPf9OvP8eXzyrHqUC3SsmfVWKh36sc5IMsn5/887uWf9w+PuMnGnR80E806DhjzjIoPr4000406Dh3TjToOIFONOg4i0406HIqtTbIIv2aGuQrUz8N8pWpnwb5ytRPg7xl6i/N0hMN8papvzRjTzTIW6b+0uw90SBvmfpLM/lEg7xl6i/N6hMN8papvzTDTzTIW6b+0mw/0SBvmfpLM/9Eg7xl6i/DAhMN8papvwwjTDTIW6b+Muww0SBvmfrLMMVEg7xl6i/DGhMN8papvwyDTDTIW6b+Mmwy0SBvmfrLMMtEg7xl6i/DMhMN8papvwzjTDTIW6b+Muwz0SBvmfrLMNFEg7xl6i/DShMN8papv4wtTTTIW6b+MsA00SBvmfrLKNNEg7xl6i9DTRMN8papv4w3TTTIW6b+Mug00SBvmfrLyNNEg7xl6i/DTxMN8papv4xBTTTIW6b+MhA10SBvmfrLaNREg7xl6i9DUhMN8papv4xLTTTIW6b+Mjg10SBvmfrLCNVEg7xl6i9fSDDRIG+Z+ssXHkw0yFum/jIEN9Egb5n6yxc2TDTIW6b+MjA40SBvmfrL6OBEg7xl6utDhNYGecvUzmYUnwZ5y9TOZhSfBjnL1MHbjGLwNqMYvM0oBm8ziuHhLFMHbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi8zSgGbzOKwduMYvA2oxi9zShGbzOK0duMYvQ2oxgfzjJ19DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rR24xi9DajGL3NKEZvM4rJ24xi8jajmLzNKCZvM4rp4SxTJ28zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGLyNqOYvM0oJm8zisnbjGIaPqNIgV4Pk8hvg/7xUf7YLg/+eTQdPBpyej0a8o+5T1vebo7O/5PcHH2qTHJz9Fk1yc3RJ+AkN0efq5PcHH1az3Fz+PTrJDdHVxaT3Bxdr0xyE6MKGj5VPMlNjCpo+AT0JDcxqqDh09qT3MSogoZPlk9yE6MKGj4FP8lNjCpo+MT+JDcxqqDhdIFJbmJUQcNJCJPcxKiChlMbJrmJUQUNJ0xMchOjChpOw5jkJkYVNJzcMclNjCpoOGVkkpsQVVAeTkSZ5CZEFZSH01smuQlRBeUHRBWUh/NrJrkJUQXl4aydSW5CVEF5OPWmk5uhvt2M5cjNTc7NlpsYmXY41UbhpgR+u0n028237Y7TZ9N2xzmxabvn6158fGxvbA2O5fUop18/Nb7dHA7rmeSm52PL0E3Px5bCTX4/ylyP3PR83TN00/N1z9BNz0WIws36NkEe6chNx0WIpZuO6xVLNx2XNgo3JX6qoERHbu5RBbXcHA7CmuTmHlWQ0LsKEj6qgoZDuya5uUcV1HRzjyqoxPh6tKRw5OYeVVDTzT2qoKabe1RBhd4/tXA+cnOPKqjp5h5VUMvN4ZC57m7K0d4cjq6b5OYeVVCp70dLPVIPhmP2Jrm5SRXUcnOTKujjZv39t6sfNzepglpuOq6CSn4bUWP6s5s1ff6K+njU38++/XRcBpn66bgOsvRzOMNxlp+OKyFTPx2XQqZ+Oq6FTP10XAyZ+um4GjL103E5ZOonSD00nD06y0+Qemg4KXWWnyD10HCu6yw/Qeohz7xYUz9B6iHPxFhTP0HqIc/MWFM/Qeohz9RYUz9B6iHP3FhTP0HqIc/kWFM/Qeohz+xYUz9B6iHP9FhTP0HqIc/8WFM/QeohzwRZUz9B6iHPDFlTP0HqIc8UWVM/QeohzxxZUz9B6iHPJFlTP0HqIc8sWVM/QeohzzRZUz9B6iHPPFlTP0HqIc9EWVM/Meoh8syUNfUTox4iz1RZUz8x6iF6YNRD5Bksa+onRj1EntGypn5i1EP0AKmHAkg95BkWbOonSD0UQOqhAFIPecY/m/oJUg95ZkWb+glSD3lmUFv66RlCbeonSD3kGUNt6idIPeQZXazws/FtGOQZXWzopmfYbfNX0TPCtm2847zYNn50suP0Np6l/Db+bdDoW1rToNHXqaZBo/O2pPd39pRHPjJodIZtGjT6JtE0aHTJX/j93Uk1hAODhkNBmwaNPgGaBo3O6pXpk6rj489pPTx+8nr4ndfj0cOJ31jjkH/9eqb68XX0ITDT19Hny0xfRx9dM30dfSrO9HX0gTvT19Fn+UxfR5cJE30dTuOc6evo4mamr0B103Ay50xfgeqm4YTOmb4C1U3DSZ0zfQWqm4YTOyf6OpzaOdNXoLppOL1zpq9AddNwiudMX4HqpuE0z5m+AtVNw6meM30FqpuG0z1n+gpUNw2nfM70FahuGk77nOkrUN00nPo501egumk4/XOmr0B103AK6Exfgeqm4TTQmb4C1U3DqaAzfQWqm4bTQWf6ClQ3DaeEzvQVqG4aTgud6StQ3TScGjrTV6C6aTg9dKavQHXTcIroTF+B6qbhNNGZvuLUTTycKjrTV5y6iYfTRWf6ilM38QOnbuLhpNGZvuLUTTycODrTV5y6iYeTRyf6Opw+OtNXoLppOIV0pq9AddNwGulMX4HqpuFU0pm+AtVNw+mkM30FqpuGU0pn+gpUNw2nlc70FahuikB1UwSqm4bTaGf6ClQ3RaC6KQLVTcN5wzN9BaqbhtOMZ/oKVDcN5yrP9BWobhpOg57pK1DdNJxhPdNXoLppOHl7pq9AdRMQL5yBeOEMxAtnIF44A/HCGYgXzkC8cAbihTMQL5yBeOEMxAtnIF44A/HCGYgXzkC8cAbihTMQL5yBeOEMxAtnIF44A/HCGYgXzkC8cAbihTMQL5yBeOEMxAtnIF44A/HCGYgXzkC8cAbihTMQL5yBeOEMxAtnIF44A/HCGYgXzkC8cAbihTMQL5yBeOEMxAtnIF44A/HCGYgXzkC8cAbihTMQL5yBeOEMxAtnIF44A/HCGYgXzkC8cAbihTMQL5yBeOECxAsXIF64APHCBYgXLg+cukmAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihQsQL1yAeOECxAsXIF64APHCBYgXLkC8cAHihRcgXngB4oUXIF54AeKFlwdO3VSAeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44QWIF16AeOEFiBdegHjhBYgXXoB44RWIF16BeOEViBdegXjh9YFTN1UgXngF4oVXIF54BeKFVyBeeAXihVcgXngF4oVXIF54BeKFVyBeeAXihVcgXngF4oVXIF54BeKFVyBeeAXihVcgXngF4oVXIF54BeKFVyBeeAXihVcgXngF4oVXIF54BeKFVyBeeAXihVcgXngF4oVXIF54BeKFVyBeeAXihVcgXngF4oVXIF54BeKFVyBeeAXihVcgXngF4oVXIF54BeKFVyBeeAXihVcgXngF4oVXIF549c0LD5E/vnL47evbfNelUNt819VN2/zRBUt4UPz55Q9/tj9Sej8ciUJjpzwofyJTj3bKcFL3VGdHlyxTnR1ds0x1dnTRMtXZ0VXLVGdHly1TnR1dt0x1dnSVM9XZ0TXRVGeRKqjhzO6pziJVUMOp3VOdRaqghnO7pzqLVEENJ3dPdRapghrO7p7qLFIFNZzePdVZpApqOL97qrNIFdRwgvdUZ5EqqOEM76nOIlVQwyneU51FqqCGc7ynOotUQQ0neU91FqmCGs7ynuosUgU1nOY91VmkCmo4z3uqszgVVHoMJ3pPdRangno6i1NBPZ3FqaCezuJUUE9ncSqop7M4FdTTWZwK6uksTgX1dBapghrO9p7qLFIFNZzuPdVZpApqON97qrNIFdRwwvdUZ5EqqOGM76nOIlVQwynfU51FqqCGc76nOotUQQ0nfU91FqmCGs76nuosUgU1nPY91VmkCmo473uqs0gV1HDi91RnkSqo4czvqc4iVVDDqd9TnUWqoIZzv6c6i1RBDSd/T3UWqYIazv6e6ixSBTWc/j3VWaQKajj/e6qzSBXUcAL4VGeRKqjhDPCpziJVUMMp4FOdRaqghnPApzqLVEENJ4FPdRapghpOGZ/qLFIFBcQkfzqLVEEBMcmfziJVUEBM8qezSBUUEJP86SxSBQXEJH86i1RBATHJn84iVVBATPKns0gVFBCT/OksUgUFxCR/OotUQQExyZ/OIlVQQEzyp7NIFRQQk/zpLFIFBcQkfzqLVEEBMcmfziJVUEBM8qezSBUUEJP86SxSBQXEJH86i1RBATHJn84iVVBATPKns0gVFBCT/OksUAUVkJjkAYlJHpCY5AGJSR4eQBVUQGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpIHJCZ5QGKSByQmeUBikgckJnlAYpJHJCZ5RGKSRyQmeURikscHUAUVkZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQRiUkekZjkEYlJHpGY5BGJSR6RmOQJiUmekJjkCYlJnpCY5OkBVEElJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlCYpInJCZ5QmKSJyQmeUJikickJnlGYpJnJCZ5RmKSZyQmeX4AVVAZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSZ6RmOQZiUmekZjkGYlJnpGY5BmJSU5ITHJCYpITEpOckJjk9ACqoAiJSU5ITHJCYpITEpOc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",
      "",
      "",
      "eJy90MEKwjAMBuB3yblI2qRz7auIhzInDEYntreSd7eCq4cNRARPSeAL/EmBeRlCnpaYwBcg8KcC6Rbic0o53DN4VDDGS62i4DrNI3gtaqM0kXUvWfteN012j7NBXjmb7hOnzjSN/MZOzgr4j7GraUHI9b/EpsNxL7hG2z6DbnPr90siD8w8jrg=",
      "",
      "eJy9kNEKwiAYRt/lv5ah/urUV4kupBYMhov0Tnz3WTQLJsQKulLhHDh+Cab55OI4+wA2AYI9JAhX5++vEN0tgqUEBn8uZyZwGacBLMtkQzFEaZ5kuWtWaZQtXHAqVlxw9QlHxStNxQs2+UhA/DG7MDUEjf4lW7ayGdd1F2T9W3wx1G4Du77pUFkdajZ7fiPJrl1n1nk5qqpI9fjOXiXnBTeYyKQ=",
      "eJy9ksEKgzAQRP9lzyJJNrsm/krpQVoLgmip3iT/Xi1NLJq2WKGnJPBmMjvJAHV7KvqqbTrIB0DIDwN016KZTl1f3HrIRQJlcx5Xl8ClqkvIpUtWlEQk+yTHvZGBRorhWgntca34G46sAi30DFt3TED/MfbIhCBozZ7YFIstBUovES+1xMLrUKEmDiQ9zHmvORmP8jTbbB4Z0/qyVWbnIXlzI9ne0KzZh85o0Qimb+wpfERhV1/rFxGl0faV8eEQl89F8Xs+S8x2id0q4e0FOHcH4GFDcA==",
      "eJyd0rEKwjAUheF3uXOQnGsS27yKOAStUCipmGwh724VcSoOZ7t3+JbD32RZr6nOay4Sm9hDkHhuUh4pv/9S07NK9B7WyJRvnzN0I/d5mSSiX8xmToQZCDMSBpZBYJAy6MggxyDPICYHMD2ACQJMEcoUoUwRyhSh+0W4cfiHdieHxdcA7kfCZnp/AUa2IIc=",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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6FcV+lWFflWhX1XoVxX6VYV+VaFfVehXFfpVhX5VoV816FcN+lWDftWgXzXoVw36VYN+1aBfNehXDfpVg37VoF816FcN+lWDftWgXzXoVw36VYN+1aBfNehXDfpVg37VoF816FcN+lWDftWgXzXoVw36VYN+1aBfNehXDfpVg37VoF816FcN+lWDftWgXzXoVw36VYN+1aBfNehXDfpVg37VoF816FcN+lWDftWgXzXoVw36VYN+1aBfNehXDfpVg37VoF816FcN+lWDftWgXzXoVw36VYN+1aBfNehXDfpVg37VoF816FcN+lWDftWgXzXoVw36VYN+1aBfNehXDfpVg37VoF816FcN+lWDftWgXzXoVw36VYN+1aBfNehXDfpVg37VoF816FcN+lWDftWgX3XoVx36VYd+1aFfdehXHfpVh37VoV916Fcd+lWHftWhX3XoVx36VYd+1aFfdehXHfpVh37VoV916Fcd+lWHftWhX3XoVx36VYd+1aFfdehXHfpVh37VoV916Fcd+lWHftWhX3XoVx36VYd+1aFfdehXHfpVh37VoV916Fcd+lWHftWhX3XoVx36VYd+1aFfdehXHfpVh37VoV916Fcd+lWHftWhX3XoVx36VYd+1aFfdehXHfpVh37VoV916Fcd+lWHftWhX3XoVx36VYd+1aFfdehXHfpVh37VoV916Fcd+lWHftWhX3XoVx36VYd+1aFfdehXHfpVh37VoV916Fcd+lWHftWhX3XoVx36VYd+1aFfDehXA/rVgH41oF8N6FcD+tWAfjWgXw3oVwP61YB+NaBfDehXA/rVgH41oF8N6FcD+tWAfjWgXw3oVwP61YB+NaBfDehXA/rVgH41oF8N6FcD+tWAfjWgXw3oVwP61YB+NaBfDehXA/rVgH41oF8N6FcD+tWAfjWgXw3oVwP61YB+NaBfDehXA/rVgH41oF8N6FcD+tWAfjWgXw3oVwP61YB+NaBfDehXA/rVgH41oF8N6FcD+tWAfjWgXw3oVwP61YB+NaBfDehXA/rVgH41oF8N6FcD+tWAfjWgXw3oVwP61YB+NaBfDehXA/rVgH41oF8N6FcD+tWAfjWgXw3oVwP61YB+NaBfDehXA/rVgH41oF9N6FcT+tWEfjWhX03oVxP61YR+NaFfTehXE/rVhH41oV9N6FcT+tWEfjWh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3j6N1dunsXr7NFZvn8bq7dNYvX0aq7dPY/X2aazePo3V26exevs0Vm+fxurt01i9fRqrt09j9fZprN4+jdXbp7F6+zRWb5/G6u3TWL19Gqu3T2P19mms3j6N1dunsXr7NFZvn8bq7dNYvX0aq7dPY/X2aazePo3V26exevs0Vm+fxurt01i9fRqrt09j9fZprN4+dW0X09I+lmsd9+J4ftAfx/FsiKoi5X35+ufjXhzHH+VabvUjTukP/2X2z/C3+rlYP7I7/txvz+741WV7dsfvOduzO34p2p7dsbBuz+5Yhbdnd/xutj274xe5vdnLzbNLbXv2tPfqyp72Xl3Z096rK3vae3VlT3uvruxp79WVPe29urKnvVdX9sT3qmef4fbsie9Vzw7G7dkT36uevZHbsye+Vz27LrdnT3yvevZzbs+e+F717BTdnj3xverZg7o9e+J71bO7dXv2xPeqZ9/s9uyJ71XPjtzt2RPfq569vtuzJ75XPbuIt2dPfK969idvz574XvXsfN6ePfG96tlTvT174nvVs1t7e/bE96pnH/j27InvVc8O8+3ZE9+rnr3r27Mnvlc9u+K3Z098r3r222/Pnvhe9ezk35498b3qOSNge/bE96rn9IHt2RPfq55zDbZnT3yvek5M2J498b3qOYthe/bE96rnlIft2RPfq57zI7ZnT3yvek6m2J498b3qOfNie/bE96rnNI3t2RPfq55zOrZnT3yvek4A2Z498b3qOVtke/bE96rn1JLt2RPfq57zULZnT3yvev4V9e3ZE9+rngN3tmdPfK96/uX37dkT36uuI5R2Z098r+adt7SyJ75X885bWtkT36t55y2t7Inv1bzzllb2vPeqJJ63JInnLUnieUuSeN6S3PLeq5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5S5J43pIknrckiectSeJ5SxJl3tJ7nCBX5XucILffGSfKoKP3OEHuqPc4Qa6d9zhBqvF7nCAF9j2OZ808bsdHnOP3ZfAzjmcZNMTxLIOGOJ5l8HEc17k0hjieZdAQx7MMGuJ4fqE2xPGsyoY4nlXZECdWVXYdrmKIE6squ45AeRzHdaqJIU6squw6e8QQJ1ZVdp0QYogTqyq7zvEwxIlVlV2nbRjixKrKrjMxDHEc686hc3zilxz34jjWHUscx7pjieNYd/4nzrgXx7HuWOJ41p1b/Z3jjrufLM+68zBOce1dN8Tx/L4j8vmzszbci+P5fccQx/P7jiGO5/cdQxzP7zuGOJ51xxDHs+48juPaU22I4/lfoYY4nlXZECdWVXbtTzbEiVWVXbuIDXFiVWXXXl9DHN+q/Pn1S+79l0Rx7cg1xPGtyg/j+Fblh3F8q/LDOL5V+WEc36r8MI5vVX4Yx7cqP4zjW5UfxolVlV37OQ1xYlVl165LQ5xYVdm1N9IQJ1ZVdu1gNMSJVZVd+wwNcWJVZdduQEOcWFXZte/NECdWGbzfJSW39vE65k3vvAVe7neb/L99v/zyHwdfpRI=",
      "eJylj8EKwyAQRP9lzlLUVav+SulB0hQCwZTqTfbf20Axh+RScpuFN8ubhnkZUp2WXBAbHOKtobxSXq9S07siam+twJgfa/TEAs9pHhEVix2rjJbmB3+zU50me4ST052WZoMD3wWu522IfP9PwZ+xcZdDHyVtHyzDbsL/JeYP05J2Ng=="
    ],
    "fileMap": {
      "1": {
        "source": "// A contract used for testing a random hodgepodge of small features from simulator and end-to-end tests.\ncontract Test {\n    // docs:start:unencrypted_import\n    use dep::aztec::log::emit_unencrypted_log;\n    // docs:end:unencrypted_import\n\n    use dep::aztec::{\n        abi,\n        abi::PrivateContextInputs,\n        hash::pedersen_hash,\n        context::PrivateContext,\n        oracle::{\n            get_public_key::get_public_key as get_public_key_oracle,\n            context::get_portal_address,\n            rand::rand\n        },\n        types::vec::BoundedVec,\n        constants_gen::EMPTY_NULLIFIED_COMMITMENT,\n    };\n    use dep::token_portal_content_hash_lib::{get_mint_private_content_hash, get_mint_public_content_hash};\n\n    #[event]\n    struct ExampleEvent {\n        value: Field,\n    }\n\n    #[aztec(private)]\n    // docs:start:empty-constructor\n    fn constructor() {}\n    // docs:end:empty-constructor\n\n    #[aztec(private)]\n    fn get_public_key(\n        address: Field,\n    ) -> [Field; 2]{\n        let pub_key = get_public_key_oracle(address);\n        \n        [pub_key.x, pub_key.y]\n    }\n\n    // Get the portal contract address through an oracle call\n    #[aztec(private)]\n    fn get_portal_contract_address(\n        aztec_address: Field\n    ) -> Field {\n        get_portal_address(aztec_address)\n    }\n\n    // Get the address of the l1 portal for this contract (taken from the input context)\n    #[aztec(private)]\n    fn get_this_portal_address() -> Field {\n        context.this_portal_address()\n    }\n\n    // Get the address of this contract (taken from the input context)\n    #[aztec(private)]\n    fn get_this_address() -> Field {\n        context.this_address()\n    }\n\n    // Test codegen for Aztec.nr interfaces\n    // See yarn-project/acir-simulator/src/client/private_execution.test.ts 'nested calls through autogenerated interface'\n    // Note; this function is deliberately NOT annotated with #[aztec(private)] due to its use in tests\n    fn test_code_gen(\n        inputs: PrivateContextInputs,\n        aField: Field,\n        aBool: bool,\n        aNumber: u32,\n        anArray: [Field; 2],\n        aStruct: DummyNote,\n        aDeepStruct: DeepStruct,\n    ) -> distinct pub abi::PrivateCircuitPublicInputs {\n        let mut args: BoundedVec<Field, 17> = BoundedVec::new(0);\n        args.push(aField);\n        args.push(aBool as Field);\n        args.push(aNumber as Field);\n        args.push_array(anArray);\n        args.push(aStruct.amount);\n        args.push(aStruct.secretHash);\n        args.push(aDeepStruct.aField);\n        args.push(aDeepStruct.aBool as Field);\n        args.push(aDeepStruct.aNote.amount);\n        args.push(aDeepStruct.aNote.secretHash);\n        for note in aDeepStruct.manyNotes {\n            args.push(note.amount);\n            args.push(note.secretHash);            \n        }\n        let args_hash = abi::hash_args(args.storage);\n        let mut context = PrivateContext::new(inputs, args_hash);\n        context.return_values.push(args_hash);\n        context.finish()\n    }\n\n    // Purely exists for testing\n    #[aztec(public)]\n    fn create_l2_to_l1_message_public(\n        amount: Field,\n        secretHash: Field,\n    ) {\n        // Create a commitment to the amount\n        let note = DummyNote::new(amount, secretHash);\n        \n        // Public oracle call to emit new commitment.\n        context.message_portal(note.get_commitment());\n        \n    }\n\n    // Purely exists for testing\n    #[aztec(public)]\n    fn create_nullifier_public(\n        amount: Field,\n        secretHash: Field,\n    ) {\n        // Create a commitment to the amount\n        let note = DummyNote::new(amount, secretHash);\n        \n        // Public oracle call to emit new commitment.\n        context.push_new_nullifier(note.get_commitment(), EMPTY_NULLIFIED_COMMITMENT);\n    }\n\n    // Forcefully emits a nullifier (for testing purposes)\n    #[aztec(private)]\n    fn emit_nullifier(nullifier: Field) {\n        context.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT);\n    }\n\n    // docs:start:is-time-equal\n    #[aztec(public)]\n    fn is_time_equal(\n        time: Field,\n    ) -> Field {\n        assert(context.timestamp() == time);\n        time\n    }\n    // docs:end:is-time-equal\n\n    #[aztec(public)]\n    fn emit_unencrypted(\n        value: Field\n    ) -> Field {\n        // docs:start:emit_unencrypted\n        emit_unencrypted_log(&mut context, value);\n        // docs:end:emit_unencrypted\n        0\n    }\n\n    #[aztec(public)]\n    fn consume_mint_public_message(\n        to: Field,\n        amount: Field,\n        canceller: Field,\n        msg_key: Field,\n        secret: Field,\n    ) {\n        let content_hash = get_mint_public_content_hash(to, amount, canceller);\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret);\n    }\n\n     #[aztec(private)]\n    fn consume_mint_private_message(\n        secret_hash_for_redeeming_minted_notes: Field, \n        amount: Field,\n        canceller: Field,\n        msg_key: Field,\n        secret_for_L1_to_L2_message_consumption: Field, \n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount, canceller);\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret_for_L1_to_L2_message_consumption);\n    }\n\n    // Purely exists for testing\n    unconstrained fn get_random(\n        kindaSeed: Field\n    ) -> Field {\n        kindaSeed * rand()\n    }\n\n    struct DummyNote {\n        amount: Field,\n        secretHash: Field\n    }\n\n    impl DummyNote {\n        fn new(amount: Field, secretHash: Field) -> pub Self {\n            Self {\n                amount: amount,\n                secretHash: secretHash\n            }\n        }\n\n        fn get_commitment(self) -> pub Field {\n            pedersen_hash([self.amount, self.secretHash],0)\n        }\n    }\n\n    struct DeepStruct {\n        aField: Field,\n        aBool: bool,\n        aNote: DummyNote,\n        manyNotes: [DummyNote; 3],\n    }\n}\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/test_contract/src/main.nr"
      },
      "3": {
        "source": "// docs:start:mint_public_content_hash_nr\nuse dep::aztec::hash::{sha256_to_field};\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner_address: Field, amount: Field, canceller: Field) -> Field {\n    \n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = owner_address.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xefc2aae6 keccak256('mint_public(bytes32,uint256,address)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xc2;\n    hash_bytes[2] = 0xaa;\n    hash_bytes[3] = 0xe6;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes: Field, amount: Field, canceller: Field) -> Field {\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xf512262e keccak256('mint_private(bytes32,uint256,address)')\n    hash_bytes[0] = 0xf5;\n    hash_bytes[1] = 0x12;\n    hash_bytes[2] = 0x26;\n    hash_bytes[3] = 0x2e;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: Field, amount: Field, callerOnL1: Field) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let callerOnL1_bytes = callerOnL1.to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = callerOnL1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n",
        "path": "/usr/src/yarn-project/noir-contracts/src/contracts/token_portal_content_hash_lib/src/lib.nr"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "36": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/address.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\n#[oracle(pedersenHash)]\nfn pedersen_hash_oracle<N>(_inputs: [Field; N], _hash_index: u32) -> Field {}\n\nunconstrained fn pedersen_hash_internal<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_oracle(inputs, hash_index)\n}\n\n// TODO(Kev): We can move this into the noir std-lib \n// as an acir opcode, once we have the pedersen PR merged.\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  // Temporary hack. This is not right. Kev forced me to do this. Blame him.\n  pedersen_hash_internal(inputs, hash_index)\n  // let input_size = inputs.len();\n  // let mut modified_inputs = [];\n  // modified_inputs = modified_inputs.push_back(input_size as Field);\n  // for i in 0..N {\n  //   modified_inputs = modified_inputs.push_back(inputs[i]);\n  // }\n  // pedersen_with_separator(modified_inputs, hash_index)[0]\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/log.nr"
      },
      "41": {
        "source": "mod l1_to_l2_message;\nmod l1_to_l2_message_getter_data;\n\nuse l1_to_l2_message_getter_data::make_l1_to_l2_message_getter_data;\n\nuse crate::abi::PublicContextInputs;\nuse crate::oracle::get_l1_to_l2_message::get_l1_to_l2_message_call;\n\n\n// Returns the nullifier for the message\npub fn process_l1_to_l2_message(l1_to_l2_root: Field, storage_contract_address: Field, msg_key: Field, content: Field, secret: Field) -> Field{\n\n    let returned_message = get_l1_to_l2_message_call(msg_key);\n    let l1_to_l2_message_data = make_l1_to_l2_message_getter_data(returned_message, 0, secret);\n\n    // Check tree roots against the inputs \n    assert(l1_to_l2_message_data.root == l1_to_l2_root);\n\n    // Validate this is the target contract\n    assert(l1_to_l2_message_data.message.recipient == storage_contract_address);\n\n    // Validate the message hash is correct\n    assert(l1_to_l2_message_data.message.content == content);\n\n    // Validate the message secret is correct\n    l1_to_l2_message_data.message.validate_message_secret();\n\n    // Compute Nullifier\n    l1_to_l2_message_data.message.compute_nullifier()\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/messaging.nr"
      },
      "42": {
        "source": "use crate::constants_gen::{\n    L1_TO_L2_MESSAGE_LENGTH,\n    GENERATOR_INDEX__NULLIFIER,\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\nuse crate::hash::{sha256_to_field, pedersen_hash};\n\nstruct L1ToL2Message {\n    sender: Field,\n    chainId: Field,\n    recipient: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    secret_hash: Field,\n    deadline: u32,\n    fee: u64,\n    tree_index: Field\n}\n\nimpl L1ToL2Message {\n    pub fn deserialize(\n        fields: [Field; L1_TO_L2_MESSAGE_LENGTH],\n        secret: Field,\n        tree_index: Field\n    ) -> L1ToL2Message {\n        L1ToL2Message {\n            sender: fields[0],\n            chainId: fields[1],\n            recipient: fields[2],\n            version: fields[3],\n            content: fields[4],\n            secret: secret,\n            secret_hash: fields[5],\n            deadline: fields[6] as u32,\n            fee: fields[7] as u64,\n            tree_index: tree_index\n        }\n    }\n\n    pub fn validate_message_secret(self: Self) {\n        let recomputed_hash = pedersen_hash([self.secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET);\n        assert(self.secret_hash == recomputed_hash);\n    }\n\n    fn message_hash(self: Self) -> Field {\n        let mut hash_bytes: [u8; 256] = [0; 256];\n        let sender_bytes = self.sender.to_be_bytes(32);\n        let chainId_bytes = self.chainId.to_be_bytes(32);\n        let recipient_bytes = self.recipient.to_be_bytes(32);\n        let version_bytes = self.version.to_be_bytes(32);\n        let content_bytes = self.content.to_be_bytes(32);\n        let secret_hash_bytes = self.secret_hash.to_be_bytes(32);\n        let deadline_bytes = (self.deadline as Field).to_be_bytes(32);\n        let fee_bytes = (self.fee as Field).to_be_bytes(32);\n\n        for i in 0..32 {\n            hash_bytes[i] = sender_bytes[i];\n            hash_bytes[i + 32] = chainId_bytes[i];\n            hash_bytes[i + 64] = recipient_bytes[i];\n            hash_bytes[i + 96] = version_bytes[i];\n            hash_bytes[i + 128] = content_bytes[i];\n            hash_bytes[i + 160] = secret_hash_bytes[i];\n            hash_bytes[i + 192] = deadline_bytes[i];\n            hash_bytes[i + 224] = fee_bytes[i];\n        }\n\n        let message_hash = sha256_to_field(hash_bytes);\n        message_hash        \n    }\n\n    // The nullifier of a l1 to l2 message is the hash of the message salted with the secret and tree index\n    // docs:start:l1_to_l2_message_compute_nullifier\n    pub fn compute_nullifier(self: Self) -> Field {\n        let message_hash = self.message_hash();\n        pedersen_hash([message_hash, self.secret, self.tree_index], GENERATOR_INDEX__NULLIFIER)\n    }\n    // docs:end:l1_to_l2_message_compute_nullifier\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/messaging/l1_to_l2_message.nr"
      },
      "43": {
        "source": "use crate::messaging::l1_to_l2_message::L1ToL2Message;\nuse crate::constants_gen::{\n    L1_TO_L2_MSG_TREE_HEIGHT,\n    L1_TO_L2_MESSAGE_LENGTH,\n};\nuse crate::utils::arr_copy_slice;\n\nstruct L1ToL2MessageGetterData {\n    message: L1ToL2Message,\n    sibling_path: [Field; L1_TO_L2_MSG_TREE_HEIGHT],\n    leaf_index: Field,\n    root: Field,\n}\n\npub fn l1_to_l2_message_getter_len() -> Field {\n    L1_TO_L2_MESSAGE_LENGTH + 1 + L1_TO_L2_MSG_TREE_HEIGHT + 1\n}\n\npub fn make_l1_to_l2_message_getter_data<N>(fields: [Field; N], start: Field, secret: Field) -> L1ToL2MessageGetterData {\n    L1ToL2MessageGetterData {\n        message: L1ToL2Message::deserialize(arr_copy_slice(fields, [0; L1_TO_L2_MESSAGE_LENGTH], start), secret, fields[start + L1_TO_L2_MESSAGE_LENGTH]),\n        leaf_index: fields[start + L1_TO_L2_MESSAGE_LENGTH],\n        sibling_path: arr_copy_slice(fields, [0; L1_TO_L2_MSG_TREE_HEIGHT], L1_TO_L2_MESSAGE_LENGTH + 1),\n        root: fields[start + L1_TO_L2_MESSAGE_LENGTH + L1_TO_L2_MSG_TREE_HEIGHT + 1],\n    }\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/messaging/l1_to_l2_message_getter_data.nr"
      },
      "56": {
        "source": "#[oracle(getPortalContractAddress)]\nfn _get_portal_address(_contract_address: Field) -> Field {}\n\nunconstrained pub fn get_portal_address(contract_address: Field) -> Field {\n    let portal_address = _get_portal_address(contract_address);\n    portal_address\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/context.nr"
      },
      "58": {
        "source": "\nuse crate::constants_gen::L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH;\n\n// Checks if a msg is within the l1ToL2Msg tree\n#[oracle(getL1ToL2Message)]\nfn get_l1_to_l2_msg_oracle(_msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_message_call(msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_msg_oracle(msg_key)\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_l1_to_l2_message.nr"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"
      },
      "61": {
        "source": "\n\n#[oracle(getRandomField)]\nfn rand_oracle() -> Field {}\n\nunconstrained pub fn rand() -> Field {\n    rand_oracle()\n}\n",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/rand.nr"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/usr/src/yarn-project/aztec-nr/aztec/src/utils.nr"
      }
    }
  }
}
